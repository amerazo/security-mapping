const threatSeedData = [
{
      "ID": "T1626",
      "name": "Abuse Elevation Control Mechanism",
      "description": "Adversaries may circumvent mechanisms designed to control elevated privileges to gain higher-level permissions. Most modern systems contain native elevation control mechanisms that are intended to limit privileges that a user can gain on a machine. Authorization has to be granted to specific users in order to perform tasks that are designated as higher risk. An adversary can use several methods to take advantage of built-in control mechanisms in order to escalate privileges on a system. ",
      "url": "https://attack.mitre.org/techniques/T1626",
      "created": "01 April 2022",
      "last modified": "15 March 2023",
      "version": "1.1",
      "tactics": "Privilege Escalation",
      "detection": "When an application requests administrator permission, users are presented with a popup and the option to grant or deny the request. Application vetting services can detect when an application requests administrator permission. Extra scrutiny could be applied to applications that do",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-22",
      "relationship citations": ","
    },
    {
      "ID": "T1517",
      "name": "Access Notifications",
      "description": "Adversaries may collect data within notifications sent by the operating system or other applications. Notifications may contain sensitive data such as one-time authentication codes sent over SMS, email, or other mediums. In the case of Credential Access, adversaries may attempt to intercept one-time code sent to the device. Adversaries can also dismiss notifications to prevent the user from noticing that the notification has arrived and can trigger action buttons contained within notifications.(Citation: ESET 2FA Bypass) ",
      "url": "https://attack.mitre.org/techniques/T1517",
      "created": "15 September 2019",
      "last modified": "15 March 2023",
      "version": "1.2",
      "tactics": "CollectionN, Credential Access",
      "detection": "Application vetting services can look for applications requesting the `BIND_NOTIFICATION_LISTENER_SERVICE` permission in a service declaration. Users can also inspect and modify the list of applications that have notification access through the device settings (e.g. Apps & notification -> Special app access -> Notification access). ",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: proofpoint_flubot_0421),(Citation: TrendMicro Coronavirus Updates),(Citation: nccgroup_sharkbot_0322),(Citation: Check Point-Joker),(Citation: Bitdefender Mandrake),(Citation: Talos-WolfRAT),(Citation: threatfabric_sova_0921),(Citation: lookout_abstractemu_1021),(Citation: Android Notification Listeners)"
    },
    {
      "ID": "T1640",
      "name": "Account Access Removal",
      "description": "Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (ex: credentials changed) to remove access to accounts. ",
      "url": "https://attack.mitre.org/techniques/T1640",
      "created": "06 April 2022",
      "last modified": "15 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "Application vetting services could closely scrutinize applications that request Device Administrator permissions.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout-Monokle),"
    },
    {
      "ID": "T1638",
      "name": "Adversary-in-the-Middle",
      "description": "Adversaries may attempt to position themselves between two or more networked devices to support follow-on behaviors such as [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1565/002) or [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1642).  \n\n \n\n[Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1638) can be achieved through several mechanisms, such as a malicious application registering itself as a VPN client. By doing this, the adversary can effectively redirect device traffic to wherever they want. However, registering as a VPN client requires user consent on both Android and iOS. Additionally, on iOS, the application requires a special entitlement that must be granted by Apple. Alternatively, if an application is able to escalate privileges, it can potentially utilize those privileges to gain access to network traffic.  \n\n \n\nOutside of a mobile device, adversaries may be able to capture traffic by employing a rogue base station or Wi-Fi access point. These devices will allow adversaries to capture network traffic after it has left the device, while it is flowing to its destination. On a local network, enterprise techniques could be used, such as DNS redirection or DNS poisoning.  \n\n \n\nIf applications properly encrypt their network traffic, sensitive data may not be accessible an adversary, depending on the point of capture. ",
      "url": "https://attack.mitre.org/techniques/T1638",
      "created": "05 April 2022",
      "last modified": "15 March 2023",
      "version": "2.1",
      "tactics": "CollectionN",
      "detection": "Application vetting services should look for applications that request VPN access. These applications should be heavily scrutinized since VPN functionality is not very common. Mobile security products can potentially detect rogue Wi-Fi access points if the adversary is attempting to decrypt traffic using an untrusted SSL certificate. \n\n \n\nOn both Android and iOS, users must grant consent to an application to act as a VPN. Both platforms also provide visual context to the user in the top status bar when a VPN connection is active. Users can see registered VPN services in the device settings. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "CEL-3",
      "relationship citations": "(Citation: Xiao-KeyRaider),(Citation: threatfabric_sova_0921),(Citation: Skycure-Profiles),"
    },
    {
      "ID": "T1437",
      "name": "Application Layer Protocol",
      "description": "Adversaries may communicate using application layer protocols to avoid detection/network filtering by blending in with existing traffic. Commands to the mobile device, and often the results of those commands, will be embedded within the protocol traffic between the mobile device and server. \n\nAdversaries may utilize many different protocols, including those used for web browsing, transferring files, electronic mail, or DNS.",
      "url": "https://attack.mitre.org/techniques/T1437",
      "created": "25 October 2017",
      "last modified": "19 April 2022",
      "version": "1.2",
      "tactics": "Command and Control",
      "detection": "Abuse of standard application protocols can be difficult to detect as many legitimate mobile applications leverage such protocols for language-specific APIs. Enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-29",
      "relationship citations": "(Citation: cyble_drinik_1022),(Citation: Lookout Uyghur Campaign),"
    },
    {
      "ID": "T1532",
      "name": "Archive Collected Data",
      "description": "Adversaries may compress and/or encrypt data that is collected prior to exfiltration. Compressing data can help to obfuscate its contents and minimize use of network resources. Encryption can be used to hide information that is being exfiltrated from detection or make exfiltration less conspicuous upon inspection by a defender. \n\n \n\nBoth compression and encryption are done prior to exfiltration, and can be performed using a utility, programming library, or custom algorithm.  ",
      "url": "https://attack.mitre.org/techniques/T1532",
      "created": "10 October 2019",
      "last modified": "01 April 2022",
      "version": "2.0",
      "tactics": "CollectionN",
      "detection": "Many encryption mechanisms are built into standard application-accessible APIs and are therefore undetectable to the end user.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: Lookout FrozenCell),(Citation: SWB Exodus March 2019),(Citation: Cofense Anubis),(Citation: Symantec GoldenCup),(Citation: Securelist Asacub),(Citation: Google Triada June 2019),(Citation: Trend Micro Bouncing Golf 2019),"
    },
    {
      "ID": "T1521.002",
      "name": "Asymmetric Cryptography",
      "description": "Adversaries may employ a known asymmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Asymmetric cryptography, also known as public key cryptography, uses a keypair per party: one public that can be freely distributed, and one private that should not be distributed. Due to how asymmetric algorithms work, the sender encrypts data with the receiver’s public key and the receiver decrypts the data with their private key. This ensures that only the intended recipient can read the encrypted data. Common public key encryption algorithms include RSA, ElGamal, and ECDSA.\n\nFor efficiency, many protocols (including SSL/TLS) use symmetric cryptography once a connection is established, but use asymmetric cryptography to establish or transmit a key. As such, these protocols are classified as [Asymmetric Cryptography](https://attack.mitre.org/techniques/T1521/002).",
      "url": "https://attack.mitre.org/techniques/T1521/002",
      "created": "05 April 2022",
      "last modified": "05 April 2022",
      "version": "1.0",
      "tactics": "Command and Control",
      "detection": "Since data encryption is a common practice in many legitimate applications and uses standard programming language-specific APIs, encrypting data for command and control communication is regarded as undetectable to the user.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: proofpoint_flubot_0421),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Lookout eSurv),"
    },
    {
      "ID": "T1429",
      "name": "Audio Capture",
      "description": "Adversaries may capture audio to collect information by leveraging standard operating system APIs of a mobile device. Examples of audio information adversaries may target include user conversations, surroundings, phone calls, or other sensitive information. \n\n \n\nAndroid and iOS, by default, require that applications request device microphone access from the user.  \n\n \n\nOn Android devices, applications must hold the `RECORD_AUDIO` permission to access the microphone or the `CAPTURE_AUDIO_OUTPUT` permission to access audio output. Because Android does not allow third-party applications to hold the `CAPTURE_AUDIO_OUTPUT` permission by default, only privileged applications, such as those distributed by Google or the device vendor, can access audio output.(Citation: Android Permissions) However, adversaries may be able to gain this access after successfully elevating their privileges. With the `CAPTURE_AUDIO_OUTPUT` permission, adversaries may pass the `MediaRecorder.AudioSource.VOICE_CALL` constant to `MediaRecorder.setAudioOutput`, allowing capture of both voice call uplink and downlink.(Citation: Manifest.permission) \n\n \n\nOn iOS devices, applications must include the `NSMicrophoneUsageDescription` key in their `Info.plist` file to access the microphone.(Citation: Requesting Auth-Media Capture)",
      "url": "https://attack.mitre.org/techniques/T1429",
      "created": "25 October 2017",
      "last modified": "16 March 2023",
      "version": "3.1",
      "tactics": "CollectionN",
      "detection": "In iOS 14 and up, an orange dot (or orange square if the Differentiate Without Color setting is enabled) appears in the status bar when the microphone is being used by an application. However, there have been demonstrations indicating it may still be possible to access the microphone in the background without triggering this visual indicator by abusing features that natively access the microphone or camera but do not trigger the visual indicators.(Citation: iOS Mic Spyware)\n\n\nIn Android 12 and up, a green dot appears in the status bar when the microphone is being used by an application.(Citation: Android Privacy Indicators)\n \n\nAndroid applications using the `RECORD_AUDIO` permission and iOS applications using `RequestRecordPermission` should be carefully reviewed and monitored. If the `CAPTURE_AUDIO_OUTPUT` permission is found in a third-party Android application, the application should be heavily scrutinized. \n\n \n\nIn both Android (6.0 and up) and iOS, users can review which applications have the permission to access the microphone through the device settings screen and revoke permissions as necessary. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-19",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: TrendMicro Coronavirus Updates),(Citation: CyberMerchants-FlexiSpy),(Citation: TrendMicro-RCSAndroid),(Citation: Lookout-PegasusAndroid),(Citation: Zscaler-SpyNote),(Citation: Lookout-Pegasus),(Citation: Lookout eSurv),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Lookout FrozenCell),(Citation: SecureList - ViceLeaker 2019),(Citation: Lookout-Dendroid),(Citation: Cofense Anubis),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Zscaler-SuperMarioRun),(Citation: Kaspersky-Skygofree),(Citation: Lookout Desert Scorpion),(Citation: Wandera-RedDrop),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: PaloAlto-SpyDealer),(Citation: Lookout ViperRAT),(Citation: Lookout Uyghur Campaign),(Citation: Bitdefender - Triout 2018),(Citation: SWB Exodus March 2019),(Citation: Lookout-EnterpriseApps),(Citation: Symantec GoldenCup),(Citation: TrendMicro-XLoader),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),(Citation: Android Capture Sensor 2019)"
    },
    {
      "ID": "T1481.002",
      "name": "Bidirectional Communication",
      "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to and receiving output from a compromised system. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems can then send the output from those commands back over that Web service channel. The return traffic may occur in a variety of ways, depending on the Web service being utilized. For example, the return traffic may take the form of the compromised system posting a comment on a forum, issuing a pull request to development project, updating a document hosted on a Web service, or by sending a Tweet. \n\n \n\nPopular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ",
      "url": "https://attack.mitre.org/techniques/T1481/002",
      "created": "06 April 2022",
      "last modified": "16 March 2023",
      "version": "1.1",
      "tactics": "Command and Control",
      "detection": "Application vetting services may provide a list of connections made or received by an application, or a list of domains contacted by the application.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: Bitdefender Mandrake),(Citation: WhiteOps TERRACOTTA),"
    },
    {
      "ID": "T1398",
      "name": "Boot or Logon Initialization Scripts",
      "description": "Adversaries may use scripts automatically executed at boot or logon initialization to establish persistence. Initialization scripts are part of the underlying operating system and are not accessible to the user unless the device has been rooted or jailbroken. ",
      "url": "https://attack.mitre.org/techniques/T1398",
      "created": "25 October 2017",
      "last modified": "16 March 2023",
      "version": "2.1",
      "tactics": "Persistence",
      "detection": "On Android, Verified Boot can detect unauthorized modifications to the system partition.(Citation: Android-VerifiedBoot) Android's SafetyNet API provides remote attestation capabilities, which could potentially be used to identify and respond to compromise devices. Samsung Knox provides a similar remote attestation capability on supported Samsung devices. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-26",
      "relationship citations": "(Citation: HackerNews-OldBoot),"
    },
    {
      "ID": "T1624.001",
      "name": "Broadcast Receivers",
      "description": "Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. \n\nAn intent is a message passed between Android applications or system components. Applications can register to receive broadcast intents at runtime, which are system-wide intents delivered to each app when certain events happen on the device, such as network changes or the user unlocking the screen. Malicious applications can then trigger certain actions within the app based on which broadcast intent was received. \n\nIn addition to Android system intents, malicious applications can register for intents broadcasted by other applications. This allows the malware to respond based on actions in other applications. This behavior typically indicates a more intimate knowledge, or potentially the targeting of specific devices, users, or applications. \n\nIn Android 8 (API level 26), broadcast intent behavior was changed, limiting the implicit intents that applications can register for in the manifest. In most cases, applications that register through the manifest will no longer receive the broadcasts. Now, applications must register context-specific broadcast receivers while the user is actively using the app.(Citation: Android Changes to System Broadcasts) ",
      "url": "https://attack.mitre.org/techniques/T1624/001",
      "created": "30 March 2022",
      "last modified": "16 March 2023",
      "version": "1.1",
      "contributors": "Alex Hinchliffe, Palo Alto Networks",
      "tactics": "Persistence",
      "detection": "Application vetting services can detect which broadcast intents an application registers for and which permissions it requests. ",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: PaloAlto-SpyDealer),(Citation: Zscaler TikTok Spyware),(Citation: Cybereason FakeSpy),(Citation: SecurityIntelligence TrickMo),(Citation: FortiGuard-FlexiSpy),(Citation: Microsoft MalLockerB),(Citation: Threat Fabric Exobot),(Citation: Talos GPlayed),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Lookout-PegasusAndroid),(Citation: Cybereason EventBot),(Citation: CheckPoint SimBad 2019),(Citation: ESET DEFENSOR ID),(Citation: Palo Alto HenBox),(Citation: Zscaler-SpyNote),(Citation: WhiteOps TERRACOTTA),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Android Changes to System Broadcasts)"
    },
    {
      "ID": "T1636.001",
      "name": "Calendar Entries",
      "description": "Adversaries may utilize standard operating system APIs to gather calendar entry data. On Android, this can be accomplished using the Calendar Content Provider. On iOS, this can be accomplished using the `EventKit` framework. \n\n \n\nIf the device has been jailbroken or rooted, an adversary may be able to access [Calendar Entries](https://attack.mitre.org/techniques/T1636/001) without the user’s knowledge or approval. ",
      "url": "https://attack.mitre.org/techniques/T1636/001",
      "created": "01 April 2022",
      "last modified": "16 March 2023",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "On both Android and iOS, the user can manage which applications have permission to access calendar information through the device settings screen, revoke the permission if necessary. Application vetting services could look for `android.permission.READ_CALENDAR` or `android.permission.WRITE_CALENDAR` in an Android application’s manifest, or `NSCalendarsUsageDescription` in an iOS application’s `Info.plist` file. Most applications do not need calendar access, so extra scrutiny could be applied to those that request it. ",
      "platforms": "Android, iOS",
      "MTC ID": "APP-13",
      "relationship citations": "(Citation: SWB Exodus March 2019),(Citation: CyberMerchants-FlexiSpy),(Citation: Lookout-PegasusAndroid),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),"
    },
    {
      "ID": "T1616",
      "name": "Call Control",
      "description": "Adversaries may make, forward, or block phone calls without user authorization. This could be used for adversary goals such as audio surveillance, blocking or forwarding calls from the device owner, or C2 communication.\n\nSeveral permissions may be used to programmatically control phone calls, including:\n\n* `ANSWER_PHONE_CALLS` - Allows the application to answer incoming phone calls(Citation: Android Permissions)\n* `CALL_PHONE` - Allows the application to initiate a phone call without going through the Dialer interface(Citation: Android Permissions)\n* `PROCESS_OUTGOING_CALLS` - Allows the application to see the number being dialed during an outgoing call with the option to redirect the call to a different number or abort the call altogether(Citation: Android Permissions)\n* `MANAGE_OWN_CALLS` - Allows a calling application which manages its own calls through the self-managed `ConnectionService` APIs(Citation: Android Permissions)\n* `BIND_TELECOM_CONNECTION_SERVICE` - Required permission when using a `ConnectionService`(Citation: Android Permissions)\n* `WRITE_CALL_LOG` - Allows an application to write to the device call log, potentially to hide malicious phone calls(Citation: Android Permissions)\n\nWhen granted some of these permissions, an application can make a phone call without opening the dialer first. However, if an application desires to simply redirect the user to the dialer with a phone number filled in, it can launch an Intent using `Intent.ACTION_DIAL`, which requires no specific permissions. This then requires the user to explicitly initiate the call or use some form of [Input Injection](https://attack.mitre.org/techniques/T1516) to programmatically initiate it.",
      "url": "https://attack.mitre.org/techniques/T1616",
      "created": "20 September 2021",
      "last modified": "16 March 2023",
      "version": "1.1",
      "contributors": "Gaetan van Diemen, ThreatFabric",
      "tactics": "CollectionN, Command and Control, Impact",
      "detection": "Users can view their default phone app in device settings. Users can review available call logs for irregularities, such as missing or unrecognized calls.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-41",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: cloudmark_tanglebot_0921),(Citation: Lookout Uyghur Campaign),(Citation: Cofense Anubis),(Citation: cyble_drinik_1022),(Citation: Lookout-Monokle),"
    },
    {
      "ID": "T1636.002",
      "name": "Call Log",
      "description": "Adversaries may utilize standard operating system APIs to gather call log data. On Android, this can be accomplished using the Call Log Content Provider. iOS provides no standard API to access the call log. \n\n \n\nIf the device has been jailbroken or rooted, an adversary may be able to access the [Call Log](https://attack.mitre.org/techniques/T1636/002) without the user’s knowledge or approval. ",
      "url": "https://attack.mitre.org/techniques/T1636/002",
      "created": "01 April 2022",
      "last modified": "16 March 2023",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "On Android, the user can manage which applications have permission to access the call log through the device settings screen, revoking the permission if necessary. Application vetting services could look for `android.permission.READ_CALL_LOG` in an Android application’s manifest. Most applications do not need call log access, so extra scrutiny could be applied to those that request it.  ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-13",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: TrendMicro Coronavirus Updates),(Citation: Lookout-PegasusAndroid),(Citation: Lookout-Pegasus),(Citation: Sophos Red Alert 2.0),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: SecureList - ViceLeaker 2019),(Citation: Talos-WolfRAT),(Citation: NYTimes-BackDoor),(Citation: Lookout-StealthMango),(Citation: Palo Alto HenBox),(Citation: Lookout-Monokle),(Citation: Zscaler-SuperMarioRun),(Citation: Lookout Dark Caracal Jan 2018),(Citation: PaloAlto-SpyDealer),(Citation: Lookout ViperRAT),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: cyble_drinik_1022),(Citation: Lookout-EnterpriseApps),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1414",
      "name": "Clipboard Data",
      "description": "Adversaries may abuse clipboard manager APIs to obtain sensitive information copied to the device clipboard. For example, passwords being copied and pasted from a password manager application could be captured by a malicious application installed on the device.(Citation: Fahl-Clipboard) \n\n \n\nOn Android, applications can use the `ClipboardManager.OnPrimaryClipChangedListener()` API to register as a listener and monitor the clipboard for changes. However, starting in Android 10, this can only be used if the application is in the foreground, or is set as the device’s default input method editor (IME).(Citation: Github Capture Clipboard 2019)(Citation: Android 10 Privacy Changes) \n\n \n\nOn iOS, this can be accomplished by accessing the `UIPasteboard.general.string` field. However, starting in iOS 14, upon accessing the clipboard, the user will be shown a system notification if the accessed text originated in a different application. For example, if the user copies the text of an iMessage from the Messages application, the notification will read “application_name has pasted from Messages” when the text was pasted in a different application.(Citation: UIPPasteboard)",
      "url": "https://attack.mitre.org/techniques/T1414",
      "created": "25 October 2017",
      "last modified": "16 March 2023",
      "version": "3.1",
      "tactics": "CollectionN, Credential Access",
      "detection": "Application vetting services could detect usage of standard clipboard APIs.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-35",
      "relationship citations": "(Citation: PaloAlto-XcodeGhost),(Citation: TrendMicro-RCSAndroid),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Android 10 Privacy Changes)"
    },
    {
      "ID": "T1632.001",
      "name": "Code Signing Policy Modification",
      "description": "Adversaries may modify code signing policies to enable execution of applications signed with unofficial or unknown keys. Code signing provides a level of authenticity on an app from a developer, guaranteeing that the program has not been tampered with and comes from an official source. Security controls can include enforcement mechanisms to ensure that only valid, signed code can be run on a device. \n\nMobile devices generally enable these security controls by default, such as preventing the installation of unknown applications on Android. Adversaries may modify these policies in a number of ways, including [Input Injection](https://attack.mitre.org/techniques/T1516) or malicious configuration profiles.",
      "url": "https://attack.mitre.org/techniques/T1632/001",
      "created": "30 March 2022",
      "last modified": "16 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "On Android, the user can use the device settings menu to view trusted CA certificates and look for unexpected or unknown certificates. A mobile security product could similarly examine the trusted CA certificate store for anomalies. Users can use the device settings menu to view which applications on the device are allowed to install unknown applications.\n\nOn iOS, the user can use the device settings menu to view installed Configuration Profiles and look for unexpected or unknown profiles. A Mobile Device Management (MDM) system could use the iOS MDM APIs to examine the list of installed Configuration Profiles for anomalies.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "STA-7",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: SecureList DVMap June 2017),(Citation: Lookout Uyghur Campaign),(Citation: trendmicro_tianyspy_0122),(Citation: paloalto_yispecter_1015),(Citation: TrendMicro-XLoader-FakeSpy),(Citation: Bitdefender Mandrake),(Citation: BlackBerry Bahamut),(Citation: Android-TrustedCA),(Citation: Symantec-iOSProfile2)"
    },
    {
      "ID": "T1623",
      "name": "Command and Scripting Interpreter",
      "description": "Adversaries may abuse command and script interpreters to execute commands, scripts, or binaries. These interfaces and languages provide ways of interacting with computer systems and are a common feature across many different platforms. Most systems come with some built-in command-line interface and scripting capabilities, for example, Android is a UNIX-like OS and includes a basic [Unix Shell](https://attack.mitre.org/techniques/T1623/001) that can be accessed via the Android Debug Bridge (ADB) or Java’s `Runtime` package.\n\nAdversaries may abuse these technologies in various ways as a means of executing arbitrary commands. Commands and scripts can be embedded in [Initial Access](https://attack.mitre.org/tactics/TA0027) payloads delivered to victims as lure documents or as secondary payloads downloaded from an existing C2. Adversaries may also execute commands through interactive terminals/shells. ",
      "url": "https://attack.mitre.org/techniques/T1623",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Execution",
      "detection": "Command-line activities can potentially be detected through Mobile Threat Defense integrations with lower-level OS APIs. This could grant the MTD agents access to running processes and their parameters, potentially detecting unwanted or malicious shells.\n\nApplication vetting services could detect the invocations of methods that could be used to execute shell commands.(Citation: Samsung Knox Mobile Threat Defense)",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: trendmicro_tianyspy_0122),"
    },
    {
      "ID": "T1577",
      "name": "Compromise Application Executable",
      "description": "Adversaries may modify applications installed on a device to establish persistent access to a victim. These malicious modifications can be used to make legitimate applications carry out adversary tasks when these applications are in use.\n\nThere are multiple ways an adversary can inject malicious code into applications. One method is by taking advantages of device vulnerabilities, the most well-known being Janus, an Android vulnerability that allows adversaries to add extra bytes to APK (application) and DEX (executable) files without affecting the file's signature. By being able to add arbitrary bytes to valid applications, attackers can seamlessly inject code into genuine executables without the user's knowledge.(Citation: Guardsquare Janus)\n\nAdversaries may also rebuild applications to include malicious modifications. This can be achieved by decompiling the genuine application, merging it with the malicious code, and recompiling it.(Citation: CheckPoint Agent Smith)\n\nAdversaries may also take action to conceal modifications to application executables and bypass user consent. These actions include altering modifications to appear as an update or exploiting vulnerabilities that allow activities of the malicious application to run inside a system application.(Citation: CheckPoint Agent Smith)",
      "url": "https://attack.mitre.org/techniques/T1577",
      "created": "07 May 2020",
      "last modified": "24 October 2022",
      "version": "1.0",
      "tactics": "Persistence",
      "detection": "This behavior is seamless to the user and is typically undetectable.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: paloalto_yispecter_1015),(Citation: CheckPoint Agent Smith),"
    },
    {
      "ID": "T1645",
      "name": "Compromise Client Software Binary",
      "description": "Adversaries may modify system software binaries to establish persistent access to devices. System software binaries are used by the underlying operating system and users over adb or terminal emulators. \n\nAdversaries may make modifications to client software binaries to carry out malicious tasks when those binaries are executed. For example, malware may come with a pre-compiled malicious binary intended to overwrite the genuine one on the device. Since these binaries may be routinely executed by the system or user, the adversary can leverage this for persistent access to the device. ",
      "url": "https://attack.mitre.org/techniques/T1645",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Persistence",
      "detection": "Verified Boot can detect unauthorized modifications to the system partition.(Citation: Android-VerifiedBoot) Android’s SafetyNet API provides remote attestation capabilities, which could potentially be used to identify and respond to compromised devices. Samsung Knox provides a similar remote attestation capability on supported Samsung devices. Application vetting services could detect applications trying to modify files in protected parts of the operating system.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-27",
      "relationship citations": "(Citation: PaloAlto-SpyDealer),(Citation: SecureList BusyGasper),(Citation: Lookout Uyghur Campaign),(Citation: Lookout-Adware),(Citation: Lookout-PegasusAndroid),(Citation: Lookout-BrainTest),(Citation: Lookout-Pegasus),(Citation: Lookout-Monokle),"
    },
    {
      "ID": "T1474.002",
      "name": "Compromise Hardware Supply Chain",
      "description": "Adversaries may manipulate hardware components in products prior to receipt by a final consumer for the purpose of data or system compromise. By modifying hardware or firmware in the supply chain, adversaries can insert a backdoor into consumer networks that may be difficult to detect and give the adversary a high degree of control over the system. ",
      "url": "https://attack.mitre.org/techniques/T1474/002",
      "created": "28 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Initial Access",
      "detection": "Integrity checking mechanisms can potentially detect unauthorized hardware modifications.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "SPC-1",
      "relationship citations": ","
    },
    {
      "ID": "T1474.001",
      "name": "Compromise Software Dependencies and Development Tools",
      "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise. Applications often depend on external software to function properly. Popular open source projects that are used as dependencies in many applications may be targeted as a means to add malicious code to users of the dependency.(Citation: Grace-Advertisement)",
      "url": "https://attack.mitre.org/techniques/T1474/001",
      "created": "28 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Initial Access",
      "detection": "Usage of insecure or malicious third-party libraries could be detected by application vetting services. Malicious software development tools could be detected by enterprises that deploy endpoint protection software on computers that are used to develop mobile apps. Application vetting could detect the usage of insecure or malicious third-party libraries.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-6",
      "relationship citations": "(Citation: PaloAlto-XcodeGhost),(Citation: PaloAlto-XcodeGhost1),"
    },
    {
      "ID": "T1474.003",
      "name": "Compromise Software Supply Chain",
      "description": "Adversaries may manipulate application software prior to receipt by a final consumer for the purpose of data or system compromise. Supply chain compromise of software can take place in a number of ways, including manipulation of the application source code, manipulation of the update/distribution mechanism for that software, or replacing compiled releases with a modified version.",
      "url": "https://attack.mitre.org/techniques/T1474/003",
      "created": "28 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Initial Access",
      "detection": "Application vetting services can detect malicious code in applications. System partition integrity checking mechanisms can detect unauthorized or malicious code contained in the system partition.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "SPC-4",
      "relationship citations": "(Citation: HackerNews-Allwinner),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: NYTimes-BackDoor),(Citation: Krebs-Triada June 2019),(Citation: Lookout-StealthMango),(Citation: BankInfoSecurity-BackDoor),(Citation: Google Triada June 2019),"
    },
    {
      "ID": "T1636.003",
      "name": "Contact List",
      "description": "Adversaries may utilize standard operating system APIs to gather contact list data. On Android, this can be accomplished using the Contacts Content Provider. On iOS, this can be accomplished using the `Contacts` framework. \n\n \n\nIf the device has been jailbroken or rooted, an adversary may be able to access the [Contact List](https://attack.mitre.org/techniques/T1636/003) without the user’s knowledge or approval. ",
      "url": "https://attack.mitre.org/techniques/T1636/003",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "On both Android and iOS, the user can manage which applications have permission to access the contact list through the device settings screen, revoking the permission if necessary. Application vetting services could look for `android.permission.READ_CONTACTS` in an Android application’s manifest, or `NSContactsUsageDescription` in an iOS application’s `Info.plist` file. Most applications do not need contact list access, so extra scrutiny could be applied to those that request it.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-13",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: ThreatFabric Ginp),(Citation: TrendMicro Coronavirus Updates),(Citation: Threat Fabric Cerberus),(Citation: CyberMerchants-FlexiSpy),(Citation: Lookout-PegasusAndroid),(Citation: Zscaler-SpyNote),(Citation: Lookout-Pegasus),(Citation: Talos Gustuff Apr 2019),(Citation: Lookout eSurv),(Citation: Sophos Red Alert 2.0),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Cybereason FakeSpy),(Citation: Kaspersky Riltok June 2019),(Citation: Cofense Anubis),(Citation: CheckPoint-Charger),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: NYTimes-BackDoor),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Securelist Asacub),(Citation: Lookout Desert Scorpion),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: PaloAlto-SpyDealer),(Citation: proofpoint_flubot_0421),(Citation: Lookout ViperRAT),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: Threat Fabric Exobot),(Citation: Lookout-EnterpriseApps),(Citation: Symantec GoldenCup),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1634",
      "name": "Credentials from Password Store",
      "description": "Adversaries may search common password storage locations to obtain user credentials. Passwords can be stored in several places on a device, depending on the operating system or application holding the credentials. There are also specific applications that store passwords to make it easier for users manage and maintain. Once credentials are obtained, they can be used to perform lateral movement and access restricted information.",
      "url": "https://attack.mitre.org/techniques/T1634",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Credential Access",
      "detection": "Mobile security products can potentially detect jailbroken devices. Application vetting services may be able to detect known privilege escalation exploits contained within applications, as well as searching application packages for strings that correlate to known password store locations.",
      "platforms": "iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "AUT-11",
      "relationship citations": ","
    },
    {
      "ID": "T1471",
      "name": "Data Encrypted for Impact",
      "description": "An adversary may encrypt files stored on a mobile device to prevent the user from accessing them. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.",
      "url": "https://attack.mitre.org/techniques/T1471",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "3.2",
      "tactics": "Impact",
      "detection": "Application vetting services may be able to detect if an application attempts to encrypt files, although this may be benign behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-28",
      "relationship citations": "(Citation: PaloAlto-Xbot),(Citation: cleafy_sova_1122),(Citation: Cofense Anubis),"
    },
    {
      "ID": "T1641",
      "name": "Data Manipulation",
      "description": "Adversaries may insert, delete, or alter data in order to manipulate external outcomes or hide activity. By manipulating data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\n\nThe type of modification and the impact it will have depends on the target application, process, and the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.",
      "url": "https://attack.mitre.org/techniques/T1641",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "Application vetting services could look for use of standard APIs (e.g. the clipboard API) that could indicate data manipulation is occurring.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1533",
      "name": "Data from Local System",
      "description": "Adversaries may search local system sources, such as file systems or local databases, to find files of interest and sensitive data prior to exfiltration.  \n\n \n\nAccess to local system data, which includes information stored by the operating system, often requires escalated privileges. Examples of local system data include authentication tokens, the device keyboard cache, Wi-Fi passwords, and photos. On Android, adversaries may also attempt to access files from external storage which may require additional storage-related permissions. \n\n ",
      "url": "https://attack.mitre.org/techniques/T1533",
      "created": "10 October 2019",
      "last modified": "01 April 2022",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "Accessing data from the local system can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "STA-41",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: SecureList BusyGasper),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: TrendMicro-RCSAndroid),(Citation: Zscaler-SpyNote),(Citation: Talos Gustuff Apr 2019),(Citation: Lookout eSurv),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Lookout FrozenCell),(Citation: SecureList - ViceLeaker 2019),(Citation: Lookout-Dendroid),(Citation: Cofense Anubis),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Gooligan Citation),(Citation: Lookout-Monokle),(Citation: Lookout Desert Scorpion),(Citation: Trend Micro Anubis),(Citation: Cylance Dust Storm),(Citation: BlackBerry Bahamut),(Citation: FlexiSpy-Features),(Citation: Lookout ViperRAT),(Citation: Lookout Uyghur Campaign),(Citation: Bitdefender - Triout 2018),(Citation: SWB Exodus March 2019),(Citation: cyble_drinik_1022),(Citation: Symantec GoldenCup),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1481.001",
      "name": "Dead Drop Resolver",
      "description": "Adversaries may use an existing, legitimate external Web service to host information that points to additional command and control (C2) infrastructure. Adversaries may post content, known as a dead drop resolver, on Web services with embedded (and often obfuscated/encoded) domains or IP addresses. Once infected, victims will reach out to and be redirected by these resolvers. \n\n \n\nPopular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. \n\n \n\nUse of a dead drop resolver may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed). ",
      "url": "https://attack.mitre.org/techniques/T1481/001",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Command and Control",
      "detection": "Application vetting services may provide a list of connections made or received by an application, or a list of domains contacted by the application. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Trend Micro Anubis),(Citation: Cofense Anubis),(Citation: TrendMicro-Anserver),(Citation: TrendMicro-XLoader-FakeSpy),(Citation: Sophos Red Alert 2.0),"
    },
    {
      "ID": "T1626.001",
      "name": "Device Administrator Permissions",
      "description": "Adversaries may abuse Android’s device administration API to obtain a higher degree of control over the device. By abusing the API, adversaries can perform several nefarious actions, such as resetting the device’s password for [Endpoint Denial of Service](https://attack.mitre.org/techniques/T1642), factory resetting the device for [File Deletion](https://attack.mitre.org/techniques/T1630/002) and to delete any traces of the malware, disabling all the device’s cameras, or to make it more difficult to uninstall the app.\n\nDevice administrators must be approved by the user at runtime, with a system popup showing which actions have been requested by the app. In conjunction with other techniques, such as [Input Injection](https://attack.mitre.org/techniques/T1516), an app can programmatically grant itself administrator permissions without any user input.",
      "url": "https://attack.mitre.org/techniques/T1626/001",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Privilege Escalation",
      "detection": "Users are prompted for approval when an application requests device administrator permissions. Users can see which applications are registered as device administrators in the device settings. Application vetting services can check for the string `BIND_DEVICE_ADMIN` in the application’s manifest. This indicates it can prompt the user for device administrator permissions.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-22",
      "relationship citations": "(Citation: Proofpoint-Marcher),(Citation: Threat Fabric Exobot),(Citation: Talos GPlayed),(Citation: TrendMicro-XLoader),(Citation: Securelist Asacub),(Citation: Sophos Red Alert 2.0),(Citation: lookout_abstractemu_1021),(Citation: GoogleIO2016)"
    },
    {
      "ID": "T1629.002",
      "name": "Device Lockout",
      "description": "An adversary may seek to inhibit user interaction by locking the legitimate user out of the device. This is typically accomplished by requesting device administrator permissions and then locking the screen using `DevicePolicyManager.lockNow()`. Other novel techniques for locking the user out of the device have been observed, such as showing a persistent overlay, using carefully crafted “call” notification screens, and locking HTML pages in the foreground. These techniques can be very difficult to get around, and typically require booting the device into safe mode to uninstall the malware.(Citation: Microsoft MalLockerB)(Citation: Talos GPlayed)(Citation: securelist rotexy 2018)\n\nPrior to Android 7, device administrators were able to reset the device lock passcode to prevent the user from unlocking the device. The release of Android 7 introduced updates that only allow device or profile owners (e.g. MDMs) to reset the device’s passcode.(Citation: Android resetPassword)",
      "url": "https://attack.mitre.org/techniques/T1629/002",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Users can view a list of device administrators in device settings and revoke permission where appropriate. Applications that request device administrator permissions should be scrutinized further for malicious behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-22",
      "relationship citations": "(Citation: securelist rotexy 2018),(Citation: Microsoft MalLockerB),(Citation: SecurityIntelligence TrickMo),"
    },
    {
      "ID": "T1629.003",
      "name": "Disable or Modify Tools",
      "description": "Adversaries may disable security tools to avoid potential detection of their tools and activities. This can take the form of disabling security software, modifying SELinux configuration, or other methods to interfere with security tools scanning or reporting information. This is typically done by abusing device administrator permissions or using system exploits to gain root access to the device to modify protected system files.",
      "url": "https://attack.mitre.org/techniques/T1629/003",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Users can view a list of active device administrators in the device settings.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Google Security Zen),(Citation: SecureList DVMap June 2017),(Citation: proofpoint_flubot_0421),(Citation: Threat Fabric Cerberus),(Citation: Cofense Anubis),(Citation: cyble_drinik_1022),(Citation: Bitdefender Mandrake),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1630.003",
      "name": "Disguise Root/Jailbreak Indicators",
      "description": "An adversary could use knowledge of the techniques used by security software to evade detection.(Citation: Brodie)(Citation: Tan) For example, some mobile security products perform compromised device detection by searching for particular artifacts such as an installed \"su\" binary, but that check could be evaded by naming the binary something else. Similarly, polymorphic code techniques could be used to evade signature-based detection.(Citation: Rastogi)",
      "url": "https://attack.mitre.org/techniques/T1630/003",
      "created": "08 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Mobile security products can use attestation to detect compromised devices.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "EMM-5",
      "relationship citations": ","
    },
    {
      "ID": "T1637.001",
      "name": "Domain Generation Algorithms",
      "description": "Adversaries may use [Domain Generation Algorithms](https://attack.mitre.org/techniques/T1637/001) (DGAs) to procedurally generate domain names for uses such as command and control communication   or malicious application distribution.(Citation: securelist rotexy 2018)\n\nDGAs increase the difficulty for defenders to block, track, or take over the command and control channel, as there could potentially be thousands of domains that malware can check for instructions.",
      "url": "https://attack.mitre.org/techniques/T1637/001",
      "created": "05 April 2022",
      "last modified": "05 April 2022",
      "version": "1.0",
      "tactics": "Command and Control",
      "detection": "Detecting dynamically generated domains can be challenging due to the number of different DGA algorithms, constantly evolving malware families, and the increasing complexity of the algorithms. There are a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) CDN domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, a more general approach for detecting a suspicious domain is to check for recently registered names ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: securelist rotexy 2018),(Citation: nccgroup_sharkbot_0322),(Citation: proofpoint_flubot_0421),(Citation: Bitdefender Mandrake),"
    },
    {
      "ID": "T1407",
      "name": "Download New Code at Runtime",
      "description": "Adversaries may download and execute dynamic code not included in the original application package after installation. This technique is primarily used to evade static analysis checks and pre-publication scans in official app stores. In some cases, more advanced dynamic or behavioral analysis techniques could detect this behavior. However, in conjunction with [Execution Guardrails](https://attack.mitre.org/techniques/T1627) techniques, detecting malicious code downloaded after installation could be difficult.\n\nOn Android, dynamic code could include native code, Dalvik code, or JavaScript code that utilizes Android WebView’s `JavascriptInterface` capability. \n\nOn iOS, dynamic code could be downloaded and executed through 3rd party libraries such as JSPatch. (Citation: FireEye-JSPatch) ",
      "url": "https://attack.mitre.org/techniques/T1407",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "1.4",
      "tactics": "Defense Evasion",
      "detection": "Existing network infrastructure may detect network calls to known malicious domains or the transfer of malicious payloads over the network. Mobile security products may provide URL inspection services that could determine if a domain being visited is malicious. Application vetting services could look for indications that the application downloads and executes new code at runtime (e.g., on Android, use of `DexClassLoader`, `System.load`, or the WebView `JavaScriptInterface` capability; on iOS, use of JSPatch or similar capabilities). Unfortunately, this is only a partial mitigation, as additional scrutiny would still need to be applied to applications that use these techniques. These techniques are often used without malicious intent, and  applications may employ other techniques to hide their use of these techniques.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-20",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: Threat Fabric Cerberus),(Citation: paloalto_yispecter_1015),(Citation: TrendMicro-RCSAndroid),(Citation: Xiao-ZergHelper),(Citation: Lookout eSurv),(Citation: Google Triada June 2019),(Citation: Sophos Red Alert 2.0),(Citation: Lookout FrozenCell),(Citation: CheckPoint-Judy),(Citation: Google Bread),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Kaspersky-Skygofree),(Citation: Lookout Desert Scorpion),(Citation: Google Security Zen),(Citation: Trend Micro Anubis),(Citation: Cybereason EventBot),(Citation: WhiteOps TERRACOTTA),(Citation: BlackBerry Bahamut),(Citation: PaloAlto-SpyDealer),(Citation: SecureList DVMap June 2017),(Citation: Lookout ViperRAT),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: SWB Exodus March 2019),(Citation: Symantec GoldenCup),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Bitdefender Mandrake),(Citation: Lookout-BrainTest),(Citation: lookout_abstractemu_1021),(Citation: Android 10 Execute)"
    },
    {
      "ID": "T1456",
      "name": "Drive-By Compromise",
      "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring an [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\n\nMultiple ways of delivering exploit code to a browser exist, including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Lookout-StealthMango)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.",
      "url": "https://attack.mitre.org/techniques/T1456",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Initial Access",
      "detection": "Mobile security products can often alert the user if their device is vulnerable to known exploits.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "CEL-22",
      "relationship citations": "(Citation: Lookout-StealthMango),(Citation: Lookout-Pegasus),(Citation: Volexity Insomnia),(Citation: paloalto_yispecter_1015),"
    },
    {
      "ID": "T1637",
      "name": "Dynamic Resolution",
      "description": "Adversaries may dynamically establish connections to command and control infrastructure to evade common detections and remediations. This may be achieved by using malware that shares a common algorithm with the infrastructure the adversary uses to receive the malware's communications. This algorithm can be used to dynamically adjust parameters such as the domain name, IP address, or port number the malware uses for command and control.",
      "url": "https://attack.mitre.org/techniques/T1637",
      "created": "05 April 2022",
      "last modified": "05 April 2022",
      "version": "1.0",
      "tactics": "Command and Control",
      "detection": "Detecting dynamically generated domains can be challenging due to the number of different Domain Generation Algorithms (DGAs), constantly evolving malware families, and the increasing complexity of the algorithms. There are a myriad of approaches for detecting a pseudo-randomly generated domain name, including using frequency analysis, Markov chains, entropy, proportion of dictionary words, ratio of vowels to other characters, and more.(Citation: Data Driven Security DGA) Content delivery network (CDN) domains may trigger these detections due to the format of their domain names. In addition to detecting a DGA domain based on the name, a more general approach for detecting a suspicious domain is to check for recently registered names or rarely visited domains.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1521",
      "name": "Encrypted Channel",
      "description": "Adversaries may explicitly employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if necessary secret keys are encoded and/or generated within malware samples/configuration files.",
      "url": "https://attack.mitre.org/techniques/T1521",
      "created": "01 October 2019",
      "last modified": "05 April 2022",
      "version": "2.0",
      "tactics": "Command and Control",
      "detection": "Since data encryption is a common practice in many legitimate applications and uses standard programming language-specific APIs, encrypting data for command and control communication is regarded as undetectable to the user.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: ESET-Twitoor),"
    },
    {
      "ID": "T1642",
      "name": "Endpoint Denial of Service",
      "description": "Adversaries may perform Endpoint Denial of Service (DoS) attacks to degrade or block the availability of services to users.\n\nOn Android versions prior to 7, apps can abuse Device Administrator access to reset the device lock passcode, preventing the user from unlocking the device. After Android 7, only device or profile owners (e.g. MDMs) can reset the device’s passcode.(Citation: Android resetPassword)\n\nOn iOS devices, this technique does not work because mobile device management servers can only remove the screen lock passcode; they cannot set a new passcode. However, on jailbroken devices, malware has been discovered that can lock the user out of the device.(Citation: Xiao-KeyRaider)",
      "url": "https://attack.mitre.org/techniques/T1642",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "On Android, users can review which applications have Device Administrator access in the device settings and revoke permission where appropriate. Application vetting services can detect and closely scrutinize applications that utilize Device Administrator access.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Threat Fabric Exobot),(Citation: CheckPoint-Charger),(Citation: PaloAlto-Xbot),(Citation: Talos GPlayed),"
    },
    {
      "ID": "T1624",
      "name": "Event Triggered Execution",
      "description": "Adversaries may establish persistence using system mechanisms that trigger execution based on specific events. Mobile operating systems have means to subscribe to events such as receiving an SMS message, device boot completion, or other device activities. \n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via automatically and repeatedly executing malicious code. After gaining access to a victim’s system, adversaries may create or modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked. ",
      "url": "https://attack.mitre.org/techniques/T1624",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Persistence",
      "detection": "Application vetting services can detect which broadcast intents an application registers for and which permissions it requests. ",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ",(Citation: Android Changes to System Broadcasts)"
    },
    {
      "ID": "T1627",
      "name": "Execution Guardrails",
      "description": "Adversaries may use execution guardrails to constrain execution or actions based on adversary supplied and environment specific conditions that are expected to be present on the target. Guardrails ensure that a payload only executes against an intended target and reduces collateral damage from an adversary’s campaign. Values an adversary can provide about a target system or environment to use as guardrails may include environment information such as location.(Citation: SWB Exodus March 2019)\n\nGuardrails can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. This use of guardrails is distinct from typical [System Checks](https://attack.mitre.org/techniques/T1633/001). While use of [System Checks](https://attack.mitre.org/techniques/T1633/001) may involve checking for known sandbox values and continuing with execution only if there is no match, the use of guardrails will involve checking for an expected target-specific value and only continuing with execution if there is such a match.",
      "url": "https://attack.mitre.org/techniques/T1627",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Detecting the use of guardrails may be difficult depending on the implementation. Users can review which applications have location and sensitive phone information permissions in the operating system’s settings menu. Application vetting services can detect unnecessary and potentially permissions or API calls.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1639",
      "name": "Exfiltration Over Alternative Protocol",
      "description": "Adversaries may steal data by exfiltrating it over a different protocol than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAlternate protocols include FTP, SMTP, HTTP/S, DNS, SMB, or any other network protocol not being used as the main command and control channel. Different protocol channels could also include Web services such as cloud storage. Adversaries may opt to also encrypt and/or obfuscate these alternate channels. ",
      "url": "https://attack.mitre.org/techniques/T1639",
      "created": "06 April 2022",
      "last modified": "29 April 2022",
      "version": "1.0",
      "tactics": "Exfiltration",
      "detection": "Exfiltration Over Alternative Protocols can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-30",
      "relationship citations": "(Citation: trendmicro_tianyspy_0122),"
    },
    {
      "ID": "T1646",
      "name": "Exfiltration Over C2 Channel",
      "description": "Adversaries may steal data by exfiltrating it over an existing command and control channel. Stolen data is encoded into the normal communications channel using the same protocol as command and control communications.",
      "url": "https://attack.mitre.org/techniques/T1646",
      "created": "01 April 2022",
      "last modified": "08 April 2022",
      "version": "1.0",
      "tactics": "Exfiltration",
      "detection": "Exfiltration over C2 channel can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-29",
      "relationship citations": "(Citation: proofpoint_flubot_0421),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: Bitdefender - Triout 2018),(Citation: SecureList - ViceLeaker 2019),(Citation: cyble_drinik_1022),(Citation: Wandera-RedDrop),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Cylance Dust Storm),(Citation: TrendMicro-XLoader-FakeSpy),(Citation: Lookout eSurv),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Google Triada June 2019),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1639.001",
      "name": "Exfiltration Over Unencrypted Non-C2 Protocol",
      "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). Adversaries may employ custom or publicly available encoding/compression algorithms (such as base64) or embed data within protocol headers and fields.",
      "url": "https://attack.mitre.org/techniques/T1639/001",
      "created": "06 April 2022",
      "last modified": "06 April 2022",
      "version": "1.0",
      "tactics": "Exfiltration",
      "detection": "Exfiltration Over Alternative Protocols can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-30",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: TrendMicro Coronavirus Updates),"
    },
    {
      "ID": "T1404",
      "name": "Exploitation for Privilege Escalation",
      "description": "Adversaries may exploit software vulnerabilities in order to to elevate privileges. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in an application, service, within the operating system software, or kernel itself to execute adversary-controlled code. Security constructions, such as permission levels, will often hinder access to information and use of certain techniques. Adversaries will likely need to perform privilege escalation to include use of software exploitation to circumvent those restrictions. \n\nWhen initially gaining access to a device, an adversary may be operating within a lower privileged process which will prevent them from accessing certain resources on the system. Vulnerabilities may exist, usually in operating system components and applications running at higher permissions, that can be exploited to gain higher levels of access on the system. This could enable someone to move from unprivileged or user- level permission to root permissions depending on the component that is vulnerable. ",
      "url": "https://attack.mitre.org/techniques/T1404",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Privilege Escalation",
      "detection": "Mobile security products can potentially utilize device APIs to determine if a device has been rooted or jailbroken.  Application vetting services could potentially determine if an application contains code designed to exploit vulnerabilities.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-26",
      "relationship citations": "(Citation: PaloAlto-SpyDealer),(Citation: Google Security Zen),(Citation: SecureList DVMap June 2017),(Citation: ArsTechnica-HummingBad),(Citation: Lookout Uyghur Campaign),(Citation: Lookout-Adware),(Citation: SWB Exodus March 2019),(Citation: Volexity Insomnia),(Citation: CheckPoint Agent Smith),(Citation: Lookout-PegasusAndroid),(Citation: Lookout-BrainTest),(Citation: Lookout-Pegasus),(Citation: Gooligan Citation),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Kaspersky-Skygofree),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1428",
      "name": "Exploitation of Remote Services",
      "description": "Adversaries may exploit remote services of enterprise servers, workstations, or other resources to gain unauthorized access to internal systems once inside of a network. Adversaries may exploit remote services by taking advantage of a mobile device’s access to an internal enterprise network through local connectivity or through a Virtual Private Network (VPN). Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. A common goal for post-compromise exploitation of remote services is for lateral movement to enable access to a remote system. \n\nAn adversary may need to determine if the remote system is in a vulnerable state, which may be done through [Network Service Scanning](https://attack.mitre.org/techniques/T1423) or other Discovery methods. These look for common, vulnerable software that may be deployed in the network, the lack of certain patches that may indicate vulnerabilities, or security software that may be used to detect or contain remote exploitation. Servers are likely a high value target for lateral movement exploitation, but endpoint systems may also be at risk if they provide an advantage or access to additional resources.\n\nDepending on the permissions level of the vulnerable remote service, an adversary may achieve [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1404) as a result of lateral movement exploitation as well. ",
      "url": "https://attack.mitre.org/techniques/T1428",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "1.2",
      "tactics": "Lateral Movement",
      "detection": "Detecting software exploitation initiated by a mobile device may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash.\n\nNetwork traffic analysis could reveal patterns of compromise if devices attempt to access unusual targets or resources. \n\nApplication vetting may be able to identify applications that perform Discovery or utilize existing connectivity to remotely access hosts within an internal enterprise network. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-32",
      "relationship citations": "(Citation: Lookout-NotCompatible),(Citation: TrendMicro-DressCode),"
    },
    {
      "ID": "T1630.002",
      "name": "File Deletion",
      "description": "Adversaries may wipe a device or delete individual files in order to manipulate external outcomes or hide activity. An application must have administrator access to fully wipe the device, while individual files may not require special permissions to delete depending on their storage location.(Citation: Android DevicePolicyManager 2019) \n\nStored data could include a variety of file formats, such as Office files, databases, stored emails, and custom file formats. The impact file deletion will have depends on the type of data as well as the goals and objectives of the adversary, but can include deleting update files to evade detection or deleting attacker-specified files for impact.",
      "url": "https://attack.mitre.org/techniques/T1630/002",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Mobile security products can detect which applications can request device administrator permissions. Users can view applications with administrator access through the device settings, and may also notice if user data is inexplicably missing. Application vetting services could be extra scrutinous of applications that request device administrator permissions.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: Lookout Uyghur Campaign),(Citation: SecureList - ViceLeaker 2019),(Citation: CheckPoint Agent Smith),(Citation: CyberMerchants-FlexiSpy),(Citation: Talos GPlayed),(Citation: Bitdefender Mandrake),(Citation: Talos-WolfRAT),(Citation: Zscaler TikTok Spyware),(Citation: Lookout-Monokle),(Citation: Lookout Dark Caracal Jan 2018),(Citation: Trend Micro Bouncing Golf 2019),"
    },
    {
      "ID": "T1420",
      "name": "File and Directory Discovery",
      "description": "Adversaries may enumerate files and directories or search in specific device locations for desired information within a filesystem. Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1420) during automated discovery to shape follow-on behaviors, including deciding if the adversary should fully infect the target and/or attempt specific actions. \n\nOn Android, Linux file permissions and SELinux policies typically stringently restrict what can be accessed by apps without taking advantage of a privilege escalation exploit. The contents of the external storage directory are generally visible, which could present concerns if sensitive data is inappropriately stored there. iOS's security architecture generally restricts the ability to perform any type of [File and Directory Discovery](https://attack.mitre.org/techniques/T1420) without use of escalated privileges. ",
      "url": "https://attack.mitre.org/techniques/T1420",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "1.2",
      "tactics": "Discovery",
      "detection": "On Android, users are presented with a permissions popup when an application requests access to external device storage.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "STA-41",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: Lookout FrozenCell),(Citation: Lookout Uyghur Campaign),(Citation: Symantec GoldenCup),(Citation: Cylance Dust Storm),(Citation: BlackBerry Bahamut),(Citation: Zscaler TikTok Spyware),"
    },
    {
      "ID": "T1541",
      "name": "Foreground Persistence",
      "description": "Adversaries may abuse Android's `startForeground()` API method to maintain continuous sensor access. Beginning in Android 9, idle applications running in the background no longer have access to device sensors, such as the camera, microphone, and gyroscope.(Citation: Android-SensorsOverview) Applications can retain sensor access by running in the foreground, using Android’s `startForeground()` API method. This informs the system that the user is actively interacting with the application, and it should not be killed. The only requirement to start a foreground service is showing a persistent notification to the user.(Citation: Android-ForegroundServices)\n\nMalicious applications may abuse the `startForeground()` API method to continue running in the foreground, while presenting a notification to the user pretending to be a genuine application. This would allow unhindered access to the device’s sensors, assuming permission has been previously granted.(Citation: BlackHat Sutter Android Foreground 2019)\n\nMalicious applications may also abuse the `startForeground()` API to inform the Android system that the user is actively interacting with the application, thus preventing it from being killed by the low memory killer.(Citation: TrendMicro-Yellow Camera)",
      "url": "https://attack.mitre.org/techniques/T1541",
      "created": "19 November 2019",
      "last modified": "20 March 2023",
      "version": "2.1",
      "contributors": "Lorin Wu, Trend Micro",
      "tactics": "Defense Evasion, Persistence",
      "detection": "Users can see persistent notifications in their notification drawer and can subsequently uninstall applications that do not belong. Applications could be vetted for their use of the `startForeground()` API, and could be further scrutinized if usage is found.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-19",
      "relationship citations": "(Citation: cyble_drinik_1022),(Citation: Zscaler TikTok Spyware),(Citation: Bitdefender Mandrake),(Citation: WhiteOps TERRACOTTA),"
    },
    {
      "ID":"T1417.002",
      "name":"GUI Input Capture",
      "description": "Adversaries may mimic common operating system GUI components to prompt users for sensitive information with a seemingly legitimate prompt. The operating system and installed applications often have legitimate needs to prompt the user for sensitive information such as account credentials, bank account information, or Personally Identifiable Information (PII)",
      "url":"https://attack.mitre.org/techniques/T1417/002",
      "created":"05 April 2022",
      "last modified":"20 March 2023",
      "version":"1.1",
      "tactics":"Collection, Credential Access",
      "detection":"Android users can view and manage which applications hold the SYSTEM_ALERT_WINDOW permission through the device settings in Apps & notifications -> Special app access -> Display over other apps (the exact menu location may vary between Android versions).\n\nApplication vetting services can look for applications requesting the SYSTEM_ALERT_WINDOW permission in the list of permissions in the app manifest.",
      "platforms":"Android, iOS",
      "tactic type":"Post-Adversary Device Access",
      "MTC ID":"APP-31",
      "relationship citations":"(Citation: ThreatFabric Ginp), (Citation: Threat Fabric Cerberus), (Citation: PaloAlto-XcodeGhost), (Citation: Talos Gustuff Apr 2019), (Citation: Sophos Red Alert 2.0), (Citation: cloudmark_tanglebot_0921), (Citation: Kaspersky Riltok June 2019), (Citation: trendmicro_tianyspy_0122), (Citation: Lookout-Dendroid), (Citation: Cofense Anubis), (Citation: Talos GPlayed), (Citation: PaloAlto-Xbot), (Citation: Group IB Gustuff Mar 2019), (Citation: Cybereason EventBot), (Citation: WhiteOps TERRACOTTA), (Citation: Lookout Dark Caracal Jan 2018), (Citation: threatfabric_sova_0921), (Citation: proofpoint_flubot_0421), (Citation: Proofpoint-Marcher), (Citation: nccgroup_sharkbot_0322), (Citation: cyble_drinik_1022), (Citation: Threat Fabric Exobot), (Citation: Bitdefender Mandrake), (Citation: securelist rotexy 2018), (Citation: Zscaler TikTok Spyware), (Citation: Android 12 Features)"
   },   
    {
      "ID": "T1643",
      "name": "Generate Traffic from Victim",
      "description": "Adversaries may generate outbound traffic from devices. This is typically performed to manipulate external outcomes, such as to achieve carrier billing fraud or to manipulate app store rankings or ratings. Outbound traffic is typically generated as SMS messages or general web traffic, but may take other forms as well.\n\nIf done via SMS messages, Android apps must hold the `SEND_SMS` permission. Additionally, sending an SMS message requires user consent if the recipient is a premium number. Applications cannot send SMS messages on iOS",
      "url": "https://attack.mitre.org/techniques/T1643",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "On Android, users can review which applications can use premium SMS features in the “Special access” page within application settings. Application vetting services can detect when applications request the `SEND_SMS` permission, which should be infrequently used.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-16",
      "relationship citations": "(Citation: Google Security Zen),(Citation: ArsTechnica-HummingBad),(Citation: CheckPoint-Judy),(Citation: CheckPoint Agent Smith),(Citation: Google Bread),(Citation: ArsTechnica-HummingWhale),(Citation: Wandera-RedDrop),(Citation: Kaspersky Triada June 2016),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Lookout-EnterpriseApps),(Citation: Tripwire-MazarBOT),(Citation: Lookout-BrainTest),(Citation: CheckPoint SimBad 2019),(Citation: WhiteOps TERRACOTTA),(Citation: Gooligan Citation),(Citation: Google Triada June 2019),"
    },
    {
      "ID": "T1627.001",
      "name": "Geofencing",
      "description": "Adversaries may use a device’s geographical location to limit certain malicious behaviors. For example, malware operators may limit the distribution of a second stage payload to certain geographic regions.(Citation: Lookout eSurv)\n\n[Geofencing](https://attack.mitre.org/techniques/T1627/001) is accomplished by persuading the user to grant the application permission to access location services. The application can then collect, process, and exfiltrate the device’s location to perform location-based actions, such as ceasing malicious behavior or showing region-specific advertisements. \n\nOne method to accomplish [Geofencing](https://attack.mitre.org/techniques/T1627/001) on Android is to use the built-in Geofencing API to automatically trigger certain behaviors when the device enters or exits a specified radius around a geographical location. Similar to  other [Geofencing](https://attack.mitre.org/techniques/T1627/001) methods, this requires that the user has granted the `ACCESS_FINE_LOCATION` and `ACCESS_BACKGROUND_LOCATION` permissions. The latter is only required if the application targets Android 10 (API level 29) or higher. However, Android 11 introduced additional permission controls that may restrict background location collectionN based on user permission choices at runtime. These additional controls include \"Allow only while using the app\", which will effectively prohibit background location collectionN.  \n\nSimilarly, on iOS, developers can use built-in APIs to setup and execute geofencing. Depending on the use case, the app will either need to call `requestWhenInUseAuthorization()` or `requestAlwaysAuthorization()`, depending on when access to the location services is required. Similar to Android, users also have the option to limit when the application can access the device’s location, including one-time use and only when the application is running in the foreground.  \n\n[Geofencing](https://attack.mitre.org/techniques/T1627/001) can be used to prevent exposure of capabilities in environments that are not intended to be compromised or operated within. For example, location data could be used to limit malware spread and/or capabilities, which could also potentially evade application analysis environments (ex: malware analysis outside of the target geographic area). Other malicious usages could include showing language-specific input prompts and/or advertisements.",
      "url": "https://attack.mitre.org/techniques/T1627/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Users can review which applications have location permissions in the operating system’s settings menu. On Android 10 and later, the system shows a notification to the user when an app has been accessing device location in the background. Application vetting services can detect unnecessary and potentially abused location permissions or API calls.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: BlackBerry Bahamut),(Citation: Lookout eSurv),"
    },
    {
      "ID": "T1628",
      "name": "Hide Artifacts",
      "description": "Adversaries may attempt to hide artifacts associated with their behaviors to evade detection. Mobile operating systems have features and developer APIs to hide various artifacts, such as an application’s launcher icon. These APIs have legitimate usages, such as hiding an icon to avoid application drawer clutter when an application does not have a usable interface. Adversaries may abuse these features and APIs to hide artifacts from the user to evade detection.",
      "url": "https://attack.mitre.org/techniques/T1628",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "The user can examine the list of all installed applications in the device settings. Application vetting services could potentially detect the usage of APIs intended for artifact hiding.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1625",
      "name": "Hijack Execution Flow",
      "description": "Adversaries may execute their own malicious payloads by hijacking the way operating systems run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur over time. \n\nThere are many ways an adversary may hijack the flow of execution. A primary way is by manipulating how the operating system locates programs to be executed. How the operating system locates libraries to be used by a program can also be intercepted. Locations where the operating system looks for programs or resources, such as file directories, could also be poisoned to include malicious payloads.",
      "url": "https://attack.mitre.org/techniques/T1625",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Persistence",
      "detection": "Mobile threat defense agents could detect unauthorized operating system modifications by using attestation.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-27",
      "relationship citations": "(Citation: paloalto_yispecter_1015),(Citation: Android-VerifiedBoot)"
    },
    {
      "ID": "T1617",
      "name": "Hooking",
      "description": "Adversaries may utilize hooking to hide the presence of artifacts associated with their behaviors to evade detection. Hooking can be used to modify return values or data structures of system APIs and function calls. This process typically involves using 3rd party root frameworks, such as Xposed or Magisk, with either a system exploit or pre-existing root access. By including custom modules for root frameworks, adversaries can hook system APIs and alter the return value and/or system data structures to alter functionality/visibility of various aspects of the system.",
      "url": "https://attack.mitre.org/techniques/T1617",
      "created": "24 September 2021",
      "last modified": "24 October 2022",
      "version": "1.0",
      "contributors": "Jörg Abraham, EclecticIQ",
      "tactics": "Defense Evasion",
      "detection": "Hooking can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout-Monokle),"
    },
    {
      "ID": "T1629",
      "name": "Impair Defenses",
      "description": "Adversaries may maliciously modify components of a victim environment in order to hinder or disable defensive mechanisms. This not only involves impairing preventative defenses, such as anti-virus, but also detection capabilities that defenders can use to audit activity and identify malicious behavior. This may span both native defenses as well as supplemental capabilities installed by users or mobile endpoint administrators.",
      "url": "https://attack.mitre.org/techniques/T1629",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Mobile security products integrated with Samsung Knox for Mobile Threat Defense can monitor processes to see if security tools are killed or stop running. Application vetting can detect many techniques associated with impairing device defenses.(Citation: Samsung Knox Mobile Threat Defense)",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-22",
      "relationship citations": ","
    },
    {
      "ID": "T1430.002",
      "name": "Impersonate SS7 Nodes",
      "description": "Adversaries may exploit the lack of authentication in signaling system network nodes to track the to track the location of mobile devices by impersonating a node.(Citation: Engel-SS7)(Citation: Engel-SS7-2008)(Citation: 3GPP-Security)(Citation: Positive-SS7)(Citation: CSRIC5-WG10-FinalReport) \n\n \n\nBy providing the victim’s MSISDN (phone number) and impersonating network internal nodes to query subscriber information from other nodes, adversaries may use data collected from each hop to eventually determine the device’s geographical cell area or nearest cell tower.(Citation: Engel-SS7)",
      "url": "https://attack.mitre.org/techniques/T1430/002",
      "created": "05 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN, Discovery",
      "detection": "Network carriers may be able to use firewalls, Intrusion Detection Systems (IDS), or Intrusion Prevention Systems (IPS) to detect and/or block SS7 exploitation.(Citation: CSRIC-WG1-FinalReport) The CSRIC also suggests threat information sharing between telecommunications industry members.",
      "platforms": "Android, iOS",
      "MTC ID": "CEL-38",
      "relationship citations": "(Citation: CitizenLab Circles),(Citation: CSRIC-WG1-FinalReport)"
    },
    {
      "ID": "T1630",
      "name": "Indicator Removal on Host",
      "description": "Adversaries may delete, alter, or hide generated artifacts on a device, including files, jailbreak status, or the malicious application itself. These actions may interfere with event collectionN, reporting, or other notifications used to detect intrusion activity. This may compromise the integrity of mobile security solutions by causing notable events or information to go unreported.",
      "url": "https://attack.mitre.org/techniques/T1630",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Mobile security products can detect which applications can request device administrator permissions. Users can view applications with administrator access through the device settings, and may also notice if user data is inexplicably missing. Users can see a list of applications that can use accessibility services in the device settings. Application vetting services could look for use of APIs that could indicate the application is trying to hide activity.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-43",
      "relationship citations": ","
    },
    {
      "ID": "T1544",
      "name": "Ingress Tool Transfer",
      "description": "Adversaries may transfer tools or other files from an external system onto a compromised device to facilitate follow-on actions. Files may be copied from an external adversary-controlled system through the command and control channel  or through alternate protocols with another tool such as FTP.",
      "url": "https://attack.mitre.org/techniques/T1544",
      "created": "21 January 2020",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Command and Control",
      "detection": "Application vetting services could look for connections to unknown domains or IP addresses. Application vetting services may indicate precisely what content was requested during application execution.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: nccgroup_sharkbot_0322),(Citation: SecureList - ViceLeaker 2019),(Citation: Wandera-RedDrop),(Citation: Bitdefender Mandrake),(Citation: Lookout-Monokle),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1417",
      "name": "Input Capture",
      "description": "Adversaries may use methods of capturing user input to obtain credentials or collect information. During normal device usage, users often provide credentials to various locations, such as login pages/portals or system dialog boxes. Input capture mechanisms may be transparent to the user (e.g. [Keylogging](https://attack.mitre.org/techniques/T1417/001)) or rely on deceiving the user into providing input into what they believe to be a genuine application prompt (e.g. [GUI Input Capture](https://attack.mitre.org/techniques/T1417/002)).",
      "url": "https://attack.mitre.org/techniques/T1417",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.3",
      "tactics": "CollectionN, Credential Access",
      "detection": "Application vetting services can look for applications requesting the permissions granting access to accessibility services or application overlay. Users can view and manage installed third-party keyboards.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-31",
      "relationship citations": ",(Citation: Android 12 Features),(Citation: Samsung Keyboards)"
    },
    {
      "ID": "T1516",
      "name": "Input Injection",
      "description": "A malicious application can inject input to the user interface to mimic user interaction through the abuse of Android's accessibility APIs.\n\n[Input Injection](https://attack.mitre.org/techniques/T1516) can be achieved using any of the following methods:\n\n* Mimicking user clicks on the screen, for example to steal money from a user's PayPal account.(Citation: android-trojan-steals-paypal-2fa)\n* Injecting global actions, such as `GLOBAL_ACTION_BACK` (programatically mimicking a physical back button press), to trigger actions on behalf of the user.(Citation: Talos Gustuff Apr 2019)\n* Inserting input into text fields on behalf of the user. This method is used legitimately to auto-fill text fields by applications such as password managers.(Citation: bitwarden autofill logins)",
      "url": "https://attack.mitre.org/techniques/T1516",
      "created": "15 September 2019",
      "last modified": "24 October 2022",
      "version": "1.1",
      "contributors": "Lukáš Štefanko, ESET",
      "tactics": "Defense Evasion, Impact",
      "detection": "Users can view applications that have registered accessibility services in the accessibility menu within the device settings.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Google Security Zen),(Citation: Kaspersky Riltok June 2019),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: nccgroup_sharkbot_0322),(Citation: Threat Fabric Cerberus),(Citation: CheckPoint Cerberus),(Citation: cleafy_sova_1122),(Citation: Bitdefender Mandrake),(Citation: WhiteOps TERRACOTTA),(Citation: ESET DEFENSOR ID),(Citation: Talos Gustuff Apr 2019),"
    },
    {
      "ID": "T1634.001",
      "name": "Keychain",
      "description": "Adversaries may collect keychain data from an iOS device to acquire credentials. Keychains are the built-in way for iOS to keep track of users' passwords and credentials for many services and features such as Wi-Fi passwords, websites, secure notes, certificates, private keys, and VPN credentials. \n\nOn the device, the keychain database is stored outside of application sandboxes to prevent unauthorized access to the raw data. Standard iOS APIs allow applications access to their own keychain contained within the database. By utilizing a privilege escalation exploit or existing root access, adversaries can access the entire encrypted database.(Citation: Apple Keychain Services)(Citation: Elcomsoft Decrypt Keychain) ",
      "url": "https://attack.mitre.org/techniques/T1634/001",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Credential Access",
      "detection": "Mobile security products can potentially detect jailbroken devices. Application vetting services may be able to detect known privilege escalation exploits contained within applications, as well as searching application packages for strings that correlate to known password store locations.",
      "platforms": "iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "AUT-11",
      "relationship citations": "(Citation: Google Project Zero Insomnia),"
    },
    {
      "ID": "T1417.001",
      "name": "Keylogging",
      "description": "Adversaries may log user keystrokes to intercept credentials or other information from the user as the user types them.\n\nSome methods of keylogging include:\n\n* Masquerading as a legitimate third-party keyboard to record user keystrokes.(Citation: Zeltser-Keyboard) On both Android and iOS, users must explicitly authorize the use of third-party keyboard apps. Users should be advised to use extreme caution before granting this authorization when it is requested.\n* Abusing accessibility features. On Android, adversaries may abuse accessibility features to record keystrokes by registering an `AccessibilityService` class, overriding the `onAccessibilityEvent` method, and listening for the `AccessibilityEvent.TYPE_VIEW_TEXT_CHANGED` event type. The event object passed into the function will contain the data that the user typed. \n*Additional methods of keylogging may be possible if root access is available. \n",
      "url": "https://attack.mitre.org/techniques/T1417/001",
      "created": "05 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN, Credential Access",
      "detection": "On Android, users can view and manage which applications have third-party keyboard access through the device settings in System -> Languages & input -> Virtual keyboard. On iOS, users can view and manage which applications have third-party keyboard access through the device settings in General -> Keyboard. \n\nApplication vetting services can look for applications requesting the `android.permission.BIND_ACCESSIBILITY_SERVICE` permission in a service declaration. On Android, users can view and manage which applications can use accessibility services through the device settings in Accessibility. The exact device settings menu locations may vary between operating system versions.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "AUT-13",
      "relationship citations": "(Citation: Lookout-Monokle),(Citation: SecureList BusyGasper),(Citation: threatfabric_sova_0921),(Citation: nccgroup_sharkbot_0322),(Citation: Threat Fabric Cerberus),(Citation: Cofense Anubis),(Citation: cyble_drinik_1022),(Citation: Threat Fabric Exobot),(Citation: Cybereason EventBot),(Citation: BlackBerry Bahamut),(Citation: Talos Gustuff Apr 2019),(Citation: FlexiSpy-Features),(Citation: Samsung Keyboards)"
    },
    {
      "ID": "T1430",
      "name": "Location Tracking",
      "description": "Adversaries may track a device’s physical location through use of standard operating system APIs via malicious or exploited applications on the compromised device. \n\n \n\nOn Android, applications holding the `ACCESS_COAURSE_LOCATION` or `ACCESS_FINE_LOCATION` permissions provide access to the device’s physical location. On Android 10 and up, declaration of the `ACCESS_BACKGROUND_LOCATION` permission in an application’s manifest will allow applications to request location access even when the application is running in the background.(Citation: Android Request Location Permissions) Some adversaries have utilized integration of Baidu map services to retrieve geographical location once the location access permissions had been obtained.(Citation: PaloAlto-SpyDealer)(Citation: Palo Alto HenBox) \n\n \n\nOn iOS, applications must include the `NSLocationWhenInUseUsageDescription`, `NSLocationAlwaysAndWhenInUseUsageDescription`, and/or `NSLocationAlwaysUsageDescription` keys in their `Info.plist` file depending on the extent of requested access to location information.(Citation: Apple Requesting Authorization for Location Services) On iOS 8.0 and up, applications call `requestWhenInUseAuthorization()` to request access to location information when the application is in use or `requestAlwaysAuthorization()` to request access to location information regardless of whether the application is in use. With elevated privileges, an adversary may be able to access location data without explicit user consent with the `com.apple.locationd.preauthorized` entitlement key.(Citation: Google Project Zero Insomnia)",
      "url": "https://attack.mitre.org/techniques/T1430",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "1.2",
      "tactics": "CollectionN, Discovery",
      "detection": "Android applications requesting the `ACCESS_COARSE_LOCATION`, `ACCESS_FINE_LOCATION`, or `ACCESS_BACKGROUND_LOCATION` permissions and iOS applications including the `NSLocationWhenInUseUsageDescription`, `NSLocationAlwaysAndWhenInUseUsageDescription`, and/or `NSLocationAlwaysUsageDescription` keys in their `Info.plist` file could be scrutinized during the application vetting process. \n\n \n\nIn both Android (6.0 and up) and iOS, users can view which applications have the permission to access the device location through the device settings screen and revoke permissions as necessary.  ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-24",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: SecureList BusyGasper),(Citation: TrendMicro Coronavirus Updates),(Citation: Threat Fabric Cerberus),(Citation: CyberMerchants-FlexiSpy),(Citation: TrendMicro-RCSAndroid),(Citation: Zscaler-SpyNote),(Citation: Lookout-Pegasus),(Citation: Lookout eSurv),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Lookout FrozenCell),(Citation: CrowdStrike-Android),(Citation: SecureList - ViceLeaker 2019),(Citation: Cofense Anubis),(Citation: CheckPoint-Charger),(Citation: Talos GPlayed),(Citation: NYTimes-BackDoor),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Kaspersky-Skygofree),(Citation: Lookout Desert Scorpion),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: PaloAlto-SpyDealer),(Citation: Lookout ViperRAT),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: Bitdefender - Triout 2018),(Citation: SWB Exodus March 2019),(Citation: Lookout-EnterpriseApps),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Symantec GoldenCup),(Citation: Bitdefender Mandrake),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),(Citation: CSRIC5-WG10-FinalReport)"
    },
    {
      "ID": "T1461",
      "name": "Lockscreen Bypass",
      "description": "An adversary with physical access to a mobile device may seek to bypass the device’s lockscreen. Several methods exist to accomplish this, including:\n\n* Biometric spoofing: If biometric authentication is used, an adversary could attempt to spoof a mobile device’s biometric authentication mechanism. Both iOS and Android partly mitigate this attack by requiring the device’s passcode rather than biometrics to unlock the device after every device restart, and after a set or random amount of time.(Citation: SRLabs-Fingerprint)(Citation: TheSun-FaceID)\n* Unlock code bypass: An adversaries could attempt to brute-force or otherwise guess the lockscreen passcode (typically a PIN or password), including physically observing (“shoulder surfing”) the device owner’s use of the lockscreen passcode. Mobile OS vendors partly mitigate this by implementing incremental backoff timers after a set number of failed unlock attempts, as well as a configurable full device wipe after several failed unlock attempts.\n* Vulnerability exploit: Techniques have been periodically demonstrated that exploit mobile devices to bypass the lockscreen. The vulnerabilities are generally patched by the device or OS vendor once disclosed.(Citation: Wired-AndroidBypass)(Citation: Kaspersky-iOSBypass)\n",
      "url": "https://attack.mitre.org/techniques/T1461",
      "created": "25 October 2017",
      "last modified": "19 April 2022",
      "version": "1.2",
      "tactics": "Initial Access",
      "detection": "Users can see if someone is watching them type in their device passcode.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1575",
      "name": "Native API",
      "description": "Adversaries may use Android’s Native Development Kit (NDK) to write native functions that can achieve execution of binaries or functions. Like system calls on a traditional desktop operating system, native code achieves execution on a lower level than normal Android SDK calls.\n\nThe NDK allows developers to write native code in C or C++ that is compiled directly to machine code, avoiding all intermediate languages and steps in compilation that higher level languages, like Java, typically have. The Java Native Interface (JNI) is the component that allows Java functions in the Android app to call functions in a native library.(Citation: Google NDK Getting Started)\n\nAdversaries may also choose to use native functions to execute malicious code since native actions are typically much more difficult to analyze than standard, non-native behaviors.(Citation: MITRE App Vetting Effectiveness)",
      "url": "https://attack.mitre.org/techniques/T1575",
      "created": "28 April 2020",
      "last modified": "08 April 2022",
      "version": "2.0",
      "tactics": "Defense Evasion, Execution",
      "detection": "This is abuse of standard OS-level APIs and are therefore typically undetectable to the end user.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout Uyghur Campaign),(Citation: Google Bread),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: WhiteOps TERRACOTTA),(Citation: Palo Alto HenBox),(Citation: Securelist Asacub),"
    },
    {
      "ID": "T1464",
      "name": "Network Denial of Service",
      "description": "Adversaries may perform Network Denial of Service (DoS) attacks to degrade or block the availability of targeted resources to users. Network DoS can be performed by exhausting the network bandwidth that services rely on, or by jamming the signal going to or coming from devices. \n\nA Network DoS will occur when an adversary is able to jam radio signals (e.g. Wi-Fi, cellular, GPS) around a device to prevent it from communicating. For example, to jam cellular signal, an adversary may use a handheld signal jammer, which jam devices within the jammer’s operational range.(Citation: NIST-SP800187) \n\nUsage of cellular jamming has been documented in several arrests reported in the news.(Citation: CNET-Celljammer)(Citation: NYTimes-Celljam)(Citation: Digitaltrends-Celljam)(Citation: Arstechnica-Celljam)",
      "url": "https://attack.mitre.org/techniques/T1464",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "1.3",
      "tactics": "Impact",
      "detection": "Unexpected loss of radio signal could indicate that a device is being actively jammed.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "CEL-7",
      "relationship citations": "(Citation: threatfabric_sova_0921),"
    },
    {
      "ID": "T1423",
      "name": "Network Service Scanning",
      "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans from the mobile device. This technique may take advantage of the mobile device's access to an internal enterprise network either through local connectivity or through a Virtual Private Network (VPN).",
      "url": "https://attack.mitre.org/techniques/T1423",
      "created": "25 October 2017",
      "last modified": "11 April 2022",
      "version": "1.1",
      "tactics": "Discovery",
      "detection": "Network service scanning can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1509",
      "name": "Non-Standard Port",
      "description": "Adversaries may generate network traffic using a protocol and port paring that are typically not associated. For example, HTTPS over port 8088 or port 587 as opposed to the traditional port 443. Adversaries may make changes to the standard port used by a protocol to bypass filtering or muddle analysis/parsing of network data.",
      "url": "https://attack.mitre.org/techniques/T1509",
      "created": "01 August 2019",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Command and Control",
      "detection": "Application vetting reports may show network communications performed by the application, including hosts, ports, protocols, and URLs. Further detection would most likely be at the enterprise level, through packet and/or netflow inspection. Many properly configured firewalls may also naturally block command and control traffic over non-standard ports.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: SWB Exodus March 2019),(Citation: FortiGuard-FlexiSpy),(Citation: CheckPoint Cerberus),(Citation: Volexity Insomnia),(Citation: Bitdefender Mandrake),(Citation: Sophos Red Alert 2.0),"
    },
    {
      "ID": "T1406",
      "name": "Obfuscated Files or Information",
      "description": "Adversaries may attempt to make a payload or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the device or in transit. This is common behavior that can be used across different platforms and the network to evade defenses. \n \nPayloads may be compressed, archived, or encrypted in order to avoid detection. These payloads may be used during Initial Access or later to mitigate detection. Portions of files can also be encoded to hide the plaintext strings that would otherwise help defenders with discovery. Payloads may also be split into separate, seemingly benign files that only reveal malicious functionality when reassembled.(Citation: Microsoft MalLockerB) ",
      "url": "https://attack.mitre.org/techniques/T1406",
      "created": "25 October 2017",
      "last modified": "06 April 2022",
      "version": "3.0",
      "tactics": "Defense Evasion",
      "detection": "Dynamic analysis, when used in application vetting, may in some cases be able to identify malicious code in obfuscated or encrypted form by detecting the code at execution time (after it is deobfuscated or decrypted). Some application vetting techniques apply reputation analysis of the application developer and can alert to potentially suspicious applications without actual examination of application code.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-21",
      "relationship citations": "(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: Threat Fabric Cerberus),(Citation: FortiGuard-FlexiSpy),(Citation: Talos Gustuff Apr 2019),(Citation: Sophos Red Alert 2.0),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Cybereason FakeSpy),(Citation: trendmicro_tianyspy_0122),(Citation: Volexity Insomnia),(Citation: Check Point-Joker),(Citation: Google Bread),(Citation: CheckPoint-Charger),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Lookout-Monokle),(Citation: Securelist Asacub),(Citation: Google Security Zen),(Citation: Microsoft MalLockerB),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Cybereason EventBot),(Citation: WhiteOps TERRACOTTA),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: TrendMicro-Obad),(Citation: SecureList DVMap June 2017),(Citation: proofpoint_flubot_0421),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: cyble_drinik_1022),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Bitdefender Mandrake),(Citation: Lookout-BrainTest),(Citation: securelist rotexy 2018),(Citation: PaloAlto-WireLurker),(Citation: TrendMicro-XLoader),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1481.003",
      "name": "One-Way Communication",
      "description": "Adversaries may use an existing, legitimate external Web service channel as a means for sending commands to a compromised system without receiving return output. Compromised systems may leverage popular websites and social media to host command and control (C2) instructions. Those infected systems may opt to send the output from those commands back over a different C2 channel, including to another distinct Web service. Alternatively, compromised systems may return no output at all in cases where adversaries want to send instructions to systems and do not want a response. \n\n \n\nPopular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. ",
      "url": "https://attack.mitre.org/techniques/T1481/003",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Command and Control",
      "detection": "Application vetting services may provide a list of connections made or received by an application, or a list of domains contacted by the application.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: ESET-Twitoor),"
    },
    {
      "ID": "T1644",
      "name": "Out of Band Data",
      "description": "Adversaries may communicate with compromised devices using out of band data streams. This could be done for a variety of reasons, including evading network traffic monitoring, as a backup method of command and control, or for data exfiltration if the device is not connected to any Internet-providing networks (i.e. cellular or Wi-Fi). Several out of band data streams exist, such as SMS messages, NFC, and Bluetooth. \n\n \n\nOn Android, applications can read push notifications to capture content from SMS messages, or other out of band data streams. This requires that the user manually grant notification access to the application via the settings menu. However, the application could launch an Intent to take the user directly there. \n\n \n\nOn iOS, there is no way to programmatically read push notifications. ",
      "url": "https://attack.mitre.org/techniques/T1644",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Command and Control",
      "detection": "If a user sees a notification with text they do not recognize, they should review their list of installed applications.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: Lookout-Monokle),(Citation: SecureList BusyGasper),(Citation: PaloAlto-SpyDealer),(Citation: SecurityIntelligence TrickMo),(Citation: Lookout Uyghur Campaign),(Citation: Kaspersky-WUC),(Citation: nccgroup_sharkbot_0322),(Citation: TrendMicro-RCSAndroid),(Citation: Lookout-PegasusAndroid),(Citation: securelist rotexy 2018),(Citation: Lookout-StealthMango),(Citation: Lookout-Pegasus),(Citation: Talos Gustuff Apr 2019),(Citation: Kaspersky-Skygofree),"
    },
    {
      "ID": "T1629.001",
      "name": "Prevent Application Removal",
      "description": "Adversaries may abuse the Android device administration API to prevent the user from uninstalling a target application. In earlier versions of Android, device administrator applications needed their administration capabilities explicitly deactivated by the user before the application could be uninstalled. This was later updated so the user could deactivate and uninstall the administrator application in one step.\n\nAdversaries may also abuse the device accessibility APIs to prevent removal. This set of APIs allows the application to perform certain actions on behalf of the user and programmatically determine what is being shown on the screen. The malicious application could monitor the device screen for certain modals (e.g., the confirmation modal to uninstall an application) and inject screen input or a back button tap to close the modal.",
      "url": "https://attack.mitre.org/techniques/T1629/001",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Users can view a list of device administrators and applications that have registered accessibility services in device settings. Users can typically visually see when an action happens that they did not initiate and can subsequently review installed applications for any out of place or unknown ones. Applications that register an accessibility service or request device administrator permissions should be scrutinized further for malicious behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-22",
      "relationship citations": "(Citation: bitdefender_flubot_0524),(Citation: threatfabric_sova_0921),(Citation: Bitdefender Mandrake),(Citation: TrendMicro-Obad),"
    },
    {
      "ID": "T1424",
      "name": "Process Discovery",
      "description": "Adversaries may attempt to get information about running processes on a device. Information obtained could be used to gain an understanding of common software/applications running on devices within a network. Adversaries may use the information from [Process Discovery](https://attack.mitre.org/techniques/T1424) during automated discovery to shape follow-on behaviors, including whether or not the adversary fully infects the target and/or attempts specific actions. \n\n \n\nRecent Android security enhancements have made it more difficult to obtain a list of running processes. On Android 7 and later, there is no way for an application to obtain the process list without abusing elevated privileges. This is due to the Android kernel utilizing the `hidepid` mount feature. Prior to Android 7, applications could utilize the `ps` command or examine the `/proc` directory on the device.(Citation: Android-SELinuxChanges) \n\n \n\nIn iOS, applications have previously been able to use the `sysctl` command to obtain a list of running processes. This functionality has been removed in later iOS versions. ",
      "url": "https://attack.mitre.org/techniques/T1424",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Discovery",
      "detection": "Mobile security products can typically detect rooted devices, which is an indication that Process Discovery is possible. Application vetting could potentially detect when applications attempt to abuse root access or root the system itself. Further, application vetting services could look for attempted usage of legacy process discovery mechanisms, such as the usage of `ps` or inspection of the `/proc` directory.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: nccgroup_sharkbot_0322),(Citation: paloalto_yispecter_1015),(Citation: CheckPoint Agent Smith),(Citation: Zimperium z9),(Citation: securelist rotexy 2018),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Trend Micro Bouncing Golf 2019),"
    },
    {
      "ID": "T1631",
      "name": "Process Injection",
      "description": "Adversaries may inject code into processes in order to evade process-based defenses or even elevate privileges. Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process. \n\nBoth Android and iOS have no legitimate way to achieve process injection. The only way this is possible is by abusing existing root access or exploiting a vulnerability.",
      "url": "https://attack.mitre.org/techniques/T1631",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion, Privilege Escalation",
      "detection": "Application vetting services could look for misuse of dynamic libraries.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
    {
      "ID": "T1636",
      "name": "Protected User Data",
      "description": "Adversaries may utilize standard operating system APIs to collect data from permission-backed data stores on a device, such as the calendar or contact list. These permissions need to be declared ahead of time. On Android, they must be included in the application’s manifest. On iOS, they must be included in the application’s `Info.plist` file.  \n\n \n\nIn almost all cases, the user is required to grant access to the data store that the application is trying to access. In recent OS versions, vendors have introduced additional privacy controls for users, such as the ability to grant permission to an application only while the application is being actively used by the user. \n\n \n\nIf the device has been jailbroken or rooted, an adversary may be able to access [Protected User Data](https://attack.mitre.org/techniques/T1636) without the user’s knowledge or approval. ",
      "url": "https://attack.mitre.org/techniques/T1636",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "Users can view permissions granted to an application in device settings. Application vetting services typically flag permissions requested by an application, which can be reviewed by an administrator. Certain dangerous permissions, such as `RECEIVE_SMS`, could receive additional scrutiny.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-13",
      "relationship citations": ","
    },
    {
      "ID": "T1604",
      "name": "Proxy Through Victim",
      "description": "Adversaries may use a compromised device as a proxy server to the Internet. By utilizing a proxy, adversaries hide the true IP address of their C2 server and associated infrastructure from the destination of the network traffic. This masquerades an adversary’s traffic as legitimate traffic originating from the compromised device, which can evade IP-based restrictions and alerts on certain services, such as bank accounts and social media websites.(Citation: Threat Fabric Exobot)\n\nThe most common type of proxy is a SOCKS proxy. It can typically be implemented using standard OS-level APIs and 3rd party libraries with no indication to the user. On Android, adversaries can use the `Proxy` API to programmatically establish a SOCKS proxy connection, or lower-level APIs to interact directly with raw sockets.",
      "url": "https://attack.mitre.org/techniques/T1604",
      "created": "30 November 2020",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Enterprises may be able to detect anomalous traffic originating from mobile devices, which could indicate compromise.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Threat Fabric Exobot),(Citation: proofpoint_flubot_0421),"
    },
    {
      "ID": "T1631.001",
      "name": "Ptrace System Calls",
      "description": "Adversaries may inject malicious code into processes via ptrace (process trace) system calls in order to evade process-based defenses as well as possibly elevate privileges. Ptrace system call injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nPtrace system call injection involves attaching to and modifying a running process. The ptrace system call enables a debugging process to observe and control another process (and each individual thread), including changing memory and register values.(Citation: PTRACE man) Ptrace system call injection is commonly performed by writing arbitrary code into a running process (e.g., by using `malloc`) then invoking that memory with `PTRACE_SETREGS` to set the register containing the next instruction to execute. Ptrace system call injection can also be done with `PTRACE_POKETEXT`/`PTRACE_POKEDATA`, which copy data to a specific address in the target process's memory (e.g., the current address of the next instruction).(Citation: PTRACE man)(Citation: Medium Ptrace JUL 2018)  \n\nPtrace system call injection may not be possible when targeting processes with high-privileges, and on some systems those that are non-child processes.(Citation: BH Linux Inject)  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via ptrace system call injection may also evade detection from security products since the execution is masked under a legitimate process.",
      "url": "https://attack.mitre.org/techniques/T1631/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion, Privilege Escalation",
      "detection": "Application vetting services could look for misuse of dynamic libraries.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Google Security Zen),(Citation: Google Project Zero Insomnia),(Citation: Google Triada June 2019),(Citation: Kaspersky Triada March 2016),"
    },
    {
      "ID": "T1430.001",
      "name": "Remote Device Management Services",
      "description": "An adversary may use access to cloud services (e.g. Google's Android Device Manager or Apple iCloud's Find my iPhone) or to an enterprise mobility management (EMM)/mobile device management (MDM) server console to track the location of mobile devices managed by the service.(Citation: Krebs-Location) ",
      "url": "https://attack.mitre.org/techniques/T1430/001",
      "created": "05 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN, Discovery",
      "detection": "Google sends a notification to the device when Android Device Manager is used to locate it. Additionally, Google provides the ability for users to view their general account activity and alerts users when their credentials have been used on a new device. Apple iCloud also provides notifications to users of account activity such as when credentials have been used. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "ECO-5",
      "relationship citations": ","
    },
    {
      "ID": "T1458",
      "name": "Replication Through Removable Media",
      "description": "Adversaries may move onto devices by exploiting or copying malware to devices connected via USB. In the case of Lateral Movement, adversaries may utilize the physical connection of a device to a compromised or malicious charging station or PC to bypass application store requirements and install malicious applications directly.(Citation: Lau-Mactans) In the case of Initial Access, adversaries may attempt to exploit the device via the connection to gain access to data stored on the device.(Citation: Krebs-JuiceJacking) Examples of this include: \n \n* Exploiting insecure bootloaders in a Nexus 6 or 6P device over USB and gaining the ability to perform actions including intercepting phone calls, intercepting network traffic, and obtaining the device physical location.(Citation: IBM-NexusUSB) \n* Exploiting weakly-enforced security boundaries in Android devices such as the Google Pixel 2 over USB.(Citation: GoogleProjectZero-OATmeal) \n* Products from Cellebrite and Grayshift purportedly that can exploit some iOS devices using physical access to the data port to unlock the passcode.(Citation: Computerworld-iPhoneCracking) ",
      "url": "https://attack.mitre.org/techniques/T1458",
      "created": "25 October 2017",
      "last modified": "08 April 2022",
      "version": "2.0",
      "tactics": "Initial Access, Lateral Movement",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "PHY-1",
      "relationship citations": "(Citation: PaloAlto-DualToy),(Citation: PaloAlto-WireLurker),(Citation: Elcomsoft-iOSRestricted)"
    },
    {
      "ID": "T1582",
      "name": "SMS Control",
      "description": "Adversaries may delete, alter, or send SMS messages without user authorization. This could be used to hide C2 SMS messages, spread malware, or various external effects.\n\nThis can be accomplished by requesting the `RECEIVE_SMS` or `SEND_SMS` permissions depending on what the malware is attempting to do. If the app is set as the default SMS handler on the device, the `SMS_DELIVER` broadcast intent can be registered, which allows the app to write to the SMS content provider. The content provider directly modifies the messaging database on the device, which could allow malicious applications with this ability to insert, modify, or delete arbitrary messages on the device.(Citation: SMS KitKat)(Citation: Android SmsProvider)",
      "url": "https://attack.mitre.org/techniques/T1582",
      "created": "11 September 2020",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "Users can view the default SMS handler in system settings.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-16",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: bitdefender_flubot_0524),(Citation: Threat Fabric Cerberus),(Citation: Sophos Red Alert 2.0),(Citation: cloudmark_tanglebot_0921),(Citation: Cybereason FakeSpy),(Citation: Lookout-Dendroid),(Citation: Cofense Anubis),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: Lookout-StealthMango),(Citation: Securelist Asacub),(Citation: Lookout Desert Scorpion),(Citation: WhiteOps TERRACOTTA),(Citation: threatfabric_sova_0921),(Citation: proofpoint_flubot_0421),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: cyble_drinik_1022),(Citation: Threat Fabric Exobot),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: Zscaler TikTok Spyware),(Citation: SMS KitKat)"
    },
    {
      "ID": "T1636.004",
      "name": "SMS Messages",
      "description": "Adversaries may utilize standard operating system APIs to gather SMS messages. On Android, this can be accomplished using the SMS Content Provider. iOS provides no standard API to access SMS messages. \n\nIf the device has been jailbroken or rooted, an adversary may be able to access [SMS Messages](https://attack.mitre.org/techniques/T1636/004) without the user’s knowledge or approval. ",
      "url": "https://attack.mitre.org/techniques/T1636/004",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "CollectionN",
      "detection": "On Android, the user can manage which applications have permission to access SMS messages through the device settings screen, revoking the permission if necessary. Application vetting services could look for `android.permission.READ_SMS` in an Android application’s manifest. Most applications do not need access to SMS messages, so extra scrutiny could be applied to those that request it. ",
      "platforms": "Android, iOS",
      "MTC ID": "APP-13",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: SecureList BusyGasper),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: Threat Fabric Cerberus),(Citation: CyberMerchants-FlexiSpy),(Citation: TrendMicro-RCSAndroid),(Citation: Zscaler-SpyNote),(Citation: Lookout-Pegasus),(Citation: Talos Gustuff Apr 2019),(Citation: Sophos Red Alert 2.0),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Cybereason FakeSpy),(Citation: Lookout FrozenCell),(Citation: Kaspersky Riltok June 2019),(Citation: SecureList - ViceLeaker 2019),(Citation: Lookout-Dendroid),(Citation: Google Bread),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: NYTimes-BackDoor),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Kaspersky Triada March 2016),(Citation: Securelist Asacub),(Citation: Zscaler-SuperMarioRun),(Citation: PaloAlto-Xbot),(Citation: Lookout Desert Scorpion),(Citation: Cylance Dust Storm),(Citation: Cybereason EventBot),(Citation: Tripwire-MazarBOT),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: FlexiSpy-Features),(Citation: threatfabric_sova_0921),(Citation: PaloAlto-SpyDealer),(Citation: proofpoint_flubot_0421),(Citation: FireEye-RuMMS),(Citation: Lookout ViperRAT),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: SWB Exodus March 2019),(Citation: cyble_drinik_1022),(Citation: Threat Fabric Exobot),(Citation: Lookout-EnterpriseApps),(Citation: Symantec GoldenCup),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: TrendMicro-XLoader),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1603",
      "name": "Scheduled Task/Job",
      "description": "Adversaries may abuse task scheduling functionality to facilitate initial or recurring execution of malicious code. On Android and iOS, APIs and libraries exist to facilitate scheduling tasks to execute at a specified date, time, or interval.\n\nOn Android, the `WorkManager` API allows asynchronous tasks to be scheduled with the system. `WorkManager` was introduced to unify task scheduling on Android, using `JobScheduler`, `GcmNetworkManager`, and `AlarmManager` internally. `WorkManager` offers a lot of flexibility for scheduling, including periodically, one time, or constraint-based (e.g. only when the device is charging).(Citation: Android WorkManager)\n\nOn iOS, the `NSBackgroundActivityScheduler` API allows asynchronous tasks to be scheduled with the system. The tasks can be scheduled to be repeating or non-repeating, however, the system chooses when the tasks will be executed. The app can choose the interval for repeating tasks, or the delay between scheduling and execution for one-time tasks.(Citation: Apple NSBackgroundActivityScheduler)",
      "url": "https://attack.mitre.org/techniques/T1603",
      "created": "04 November 2020",
      "last modified": "24 October 2022",
      "version": "1.0",
      "contributors": "Lorin Wu, Trend Micro",
      "tactics": "Execution, Persistence",
      "detection": "Scheduling tasks/jobs can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Talos GPlayed),(Citation: Zscaler TikTok Spyware),(Citation: WhiteOps TERRACOTTA),"
    },
    {
      "ID": "T1513",
      "name": "Screen Capture",
      "description": "Adversaries may use screen capture to collect additional information about a target device, such as applications running in the foreground, user data, credentials, or other sensitive information. Applications running in the background can capture screenshots or videos of another application running in the foreground by using the Android `MediaProjectionManager` (generally requires the device user to grant consent).(Citation: Fortinet screencap July 2019)(Citation: Android ScreenCap1 2019) Background applications can also use Android accessibility services to capture screen contents being displayed by a foreground application.(Citation: Lookout-Monokle) An adversary with root access or Android Debug Bridge (adb) access could call the Android `screencap` or `screenrecord` commands.(Citation: Android ScreenCap2 2019)(Citation: Trend Micro ScreenCap July 2015) ",
      "url": "https://attack.mitre.org/techniques/T1513",
      "created": "08 August 2019",
      "last modified": "20 March 2023",
      "version": "1.3",
      "tactics": "CollectionN",
      "detection": "The user can view a list of apps with accessibility service privileges in the device settings. Application vetting services can look for the use of the Android `MediaProjectionManager` class, applying extra scrutiny to applications that use the class.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-40",
      "relationship citations": "(Citation: PaloAlto-SpyDealer),(Citation: SecureList BusyGasper),(Citation: cloudmark_tanglebot_0921),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: Cofense Anubis),(Citation: cyble_drinik_1022),(Citation: cleafy_sova_1122),(Citation: Bitdefender Mandrake),(Citation: Cybereason EventBot),(Citation: Talos-WolfRAT),(Citation: ESET DEFENSOR ID),(Citation: Zscaler TikTok Spyware),(Citation: Lookout-Monokle),(Citation: FlexiSpy-Features),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Nightwatch screencap April 2016)"
    },
    {
      "ID": "T1418.001",
      "name": "Security Software Discovery",
      "description": "Adversaries may attempt to get a listing of security applications and configurations that are installed on a device. This may include things such as mobile security products. Adversaries may use the information from [Security Software Discovery](https://attack.mitre.org/techniques/T1418/001) during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempt specific actions. ",
      "url": "https://attack.mitre.org/techniques/T1418/001",
      "created": "31 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Discovery",
      "detection": "Application vetting services could look for the Android permission `android.permission.QUERY_ALL_PACKAGES`, and apply extra scrutiny to applications that request it. On iOS, application vetting services could look for usage of the private API `LSApplicationWorkspace` and apply extra scrutiny to applications that employ it.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-12",
      "relationship citations": "(Citation: Threat Fabric Exobot),(Citation: Talos Gustuff Apr 2019),(Citation: Android Package Visibility)"
    },
    {
      "ID": "T1418",
      "name": "Software Discovery",
      "description": "Adversaries may attempt to get a listing of applications that are installed on a device. Adversaries may use the information from [Software Discovery](https://attack.mitre.org/techniques/T1418) during automated discovery to shape follow-on behaviors, including whether or not to fully infect the target and/or attempts specific actions. \n\n \n\nAdversaries may attempt to enumerate applications for a variety of reasons, such as figuring out what security measures are present or to identify the presence of target applications. ",
      "url": "https://attack.mitre.org/techniques/T1418",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Discovery",
      "detection": "Application vetting services could look for the Android permission `android.permission.QUERY_ALL_PACKAGES`, and apply extra scrutiny to applications that request it. On iOS, application vetting services could look for usage of the private API `LSApplicationWorkspace` and apply extra scrutiny to applications that employ it.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-12",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: ThreatFabric Ginp),(Citation: SecurityIntelligence TrickMo),(Citation: Threat Fabric Cerberus),(Citation: paloalto_yispecter_1015),(Citation: Lookout-PegasusAndroid),(Citation: cleafy_sova_1122),(Citation: Google Triada June 2019),(Citation: Sophos Red Alert 2.0),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: Cybereason FakeSpy),(Citation: Kaspersky Riltok June 2019),(Citation: SecureList - ViceLeaker 2019),(Citation: Cofense Anubis),(Citation: Talos GPlayed),(Citation: Talos-WolfRAT),(Citation: ESET DEFENSOR ID),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Lookout Desert Scorpion),(Citation: CheckPoint Agent Smith),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Cybereason EventBot),(Citation: WhiteOps TERRACOTTA),(Citation: Lookout Dark Caracal Jan 2018),(Citation: FlexiSpy-Features),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: Symantec GoldenCup),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),(Citation: Android Package Visibility)"
    },
    {
      "ID": "T1406.002",
      "name": "Software Packing",
      "description": "Adversaries may perform software packing to conceal their code. Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory. \n\nUtilities used to perform software packing are called packers. An example packer is FTT. A more comprehensive list of known packers is available, but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.",
      "url": "https://attack.mitre.org/techniques/T1406/002",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Application vetting services could look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because as legitimate software may use packing techniques to reduce binary size or to protect proprietary code.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Google Bread),(Citation: Talos Gustuff Apr 2019),(Citation: threatfabric_sova_0921),"
    },
    {
      "ID": "T1635",
      "name": "Steal Application Access Token",
      "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering or URI hijacking and typically requires user action to grant access, such as through a system “Open With” dialogue.  \n\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework used to issue tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry through OAuth 2.0 using a variety of authorization protocols. An example of a commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested without requiring user credentials.",
      "url": "https://attack.mitre.org/techniques/T1635",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Credential Access",
      "detection": "On Android, users may be presented with a popup to select the appropriate application to open a URI in. If the user sees an application they do not recognize, they can remove it. When vetting applications for potential security weaknesses, the vetting process could look for insecure use of Intents. Developers should be encouraged to use techniques to ensure that the intent can only be sent to an appropriate destination (e.g., use explicit rather than implicit intents, permission checking, checking of the destination app's signing certificate, or utilizing the App Links feature). For mobile applications using OAuth, encourage use of best practice.(Citation: IETF-OAuthNativeApps)(Citation: Android-AppLinks)",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ",(Citation: IETF-PKCE),(Citation: Android App Links),(Citation: iOS Universal Links),(Citation: Trend Micro iOS URL Hijacking)"
    },
    {
      "ID": "T1406.001",
      "name": "Steganography",
      "description": "Adversaries may use steganography techniques in order to prevent the detection of hidden information. Steganographic techniques can be used to hide data in digital media such as images, audio tracks, video clips, or text files.",
      "url": "https://attack.mitre.org/techniques/T1406/001",
      "created": "30 March 2022",
      "last modified": "21 April 2022",
      "version": "1.0",
      "tactics": "Defense Evasion",
      "detection": "Detection of steganography is difficult unless detectable artifacts with a known signature are left behind by the obfuscation process. Look for strings are other signatures left in system artifacts related to decoding steganography.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: CheckPoint Agent Smith),"
    },
    {
      "ID": "T1409",
      "name": "Stored Application Data",
      "description": "Adversaries may try to access and collect application data resident on the device. Adversaries often target popular applications, such as Facebook, WeChat, and Gmail.(Citation: SWB Exodus March 2019) \n\n \n\nDue to mobile OS sandboxing, this technique is only possible in three scenarios: \n\n \n\n* An application stores files in unprotected external storage \n* An application stores files in its internal storage directory with insecure permissions (e.g. 777) \n* The adversary gains root permissions on the device ",
      "url": "https://attack.mitre.org/techniques/T1409",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "3.1",
      "tactics": "CollectionN",
      "detection": "Application vetting services could detect when applications store data insecurely, for example, in unprotected external storage.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "AUT-0",
      "relationship citations": "(Citation: Lookout Desert Scorpion),(Citation: PaloAlto-SpyDealer),(Citation: SecureList BusyGasper),(Citation: Cybereason FakeSpy),(Citation: Lookout FrozenCell),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: FortiGuard-FlexiSpy),(Citation: paloalto_yispecter_1015),(Citation: TrendMicro-RCSAndroid),(Citation: Lookout-PegasusAndroid),(Citation: Bitdefender Mandrake),(Citation: cleafy_sova_1122),(Citation: Lookout-StealthMango),(Citation: Lookout-Pegasus),(Citation: Lookout Dark Caracal Jan 2018),(Citation: threatfabric_sova_0921),(Citation: Kaspersky-Skygofree),"
    },
    {
      "ID": "T1632",
      "name": "Subvert Trust Controls",
      "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted applications. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features include: an app being allowed to run because it is signed by a valid code signing certificate; an OS prompt alerting the user that an app came from an untrusted source; or getting an indication that you are about to connect to an untrusted site. The method adversaries use will depend on the specific mechanism they seek to subvert. ",
      "url": "https://attack.mitre.org/techniques/T1632",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "On Android, the user can use the device settings menu to view trusted CA certificates and look for unexpected or unknown certificates. A mobile security product could similarly examine the trusted CA certificate store for anomalies. Users can use the device settings menu to view which applications on the device are allowed to install unknown applications. \n\nOn iOS, the user can use the device settings menu to view installed Configuration Profiles and look for unexpected or unknown profiles. A Mobile Device Management (MDM) system could use the iOS MDM APIs to examine the list of installed Configuration Profiles for anomalies.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "STA-7",
      "relationship citations": ",(Citation: Android-TrustedCA),(Citation: Symantec-iOSProfile2)"
    },
    {
      "ID": "T1474",
      "name": "Supply Chain Compromise",
      "description": "Adversaries may manipulate products or product delivery mechanisms prior to receipt by a final consumer for the purpose of data or system compromise.\n\nSupply chain compromise can take place at any stage of the supply chain including:\n\n* Manipulation of development tools\n* Manipulation of a development environment\n* Manipulation of source code repositories (public or private)\n* Manipulation of source code in open-source dependencies\n* Manipulation of software update/distribution mechanisms\n* Compromised/infected system images\n* Replacement of legitimate software with modified versions\n* Sales of modified/counterfeit products to legitimate distributors\n* Shipment interdiction\n\nWhile supply chain compromise can impact any component of hardware or software, attackers looking to gain execution have often focused on malicious additions to legitimate software in software distribution or update channels. Targeting may be specific to a desired victim set or malicious software may be distributed to a broad set of consumers but only move on to additional tactics on specific victims.  Popular open source projects that are used as dependencies in many applications may also be targeted as a means to add malicious code to users of the dependency, specifically with the widespread usage of third-party advertising libraries.(Citation: Grace-Advertisement)(Citation: NowSecure-RemoteCode)",
      "url": "https://attack.mitre.org/techniques/T1474",
      "created": "17 October 2018",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "Initial Access",
      "detection": "Usage of insecure or malicious third-party libraries could be detected by application vetting services. Malicious software development tools could be detected by enterprises that deploy endpoint protection software on computers that are used to develop mobile apps. Application vetting could detect the usage of insecure or malicious third-party libraries.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-6",
      "relationship citations": ","
    },
    {
      "ID": "T1628.001",
      "name": "Suppress Application Icon",
      "description": "A malicious application could suppress its icon from being displayed to the user in the application launcher. This hides the fact that it is installed, and can make it more difficult for the user to uninstall the application. Hiding the application's icon programmatically does not require any special permissions. \n\nThis behavior has been seen in the BankBot/Spy Banker family of malware.(Citation: android-trojan-steals-paypal-2fa)(Citation: sunny-stolen-credentials)(Citation: bankbot-spybanker) \n\nBeginning in Android 10, changes were introduced to inhibit malicious applications’ ability to hide their icon. If an app is a system app, requests no permissions, or does not have a launcher activity, the application’s icon will be fully hidden. Further, if the device is fully managed or the application is in a work profile, the icon will be fully hidden. Otherwise, a synthesized activity is shown, which is a launcher icon that represents the app’s details page in the system settings. If the user clicks the synthesized activity in the launcher, they are taken to the application’s details page in the system settings.(Citation: Android 10 Limitations to Hiding App Icons)(Citation: LauncherApps getActivityList)",
      "url": "https://attack.mitre.org/techniques/T1628/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "contributors": "Emily Ratliff, IBM",
      "tactics": "Defense Evasion",
      "detection": "The user can examine the list of all installed applications, including those with a suppressed icon, in the device settings. If the user is redirected to the device settings when tapping an application’s icon, they should inspect the application to ensure it is genuine. Application vetting services could potentially detect the usage of APIs intended for suppressing the application’s icon.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: ThreatFabric Ginp),(Citation: Threat Fabric Cerberus),(Citation: FortiGuard-FlexiSpy),(Citation: paloalto_yispecter_1015),(Citation: Cybereason FakeSpy),(Citation: Lookout Desert Scorpion),(Citation: ESET-Twitoor),(Citation: CheckPoint Agent Smith),(Citation: Group IB Gustuff Mar 2019),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: threatfabric_sova_0921),(Citation: FlexiSpy-Features),(Citation: Lookout Uyghur Campaign),(Citation: Bitdefender - Triout 2018),(Citation: cyble_drinik_1022),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: CheckPoint SimBad 2019),(Citation: Zscaler TikTok Spyware),(Citation: Android 10 Limitations to Hiding App Icons),(Citation: LauncherApps getActivityList)"
    },
    {
      "ID": "T1521.001",
      "name": "Symmetric Cryptography",
      "description": "Adversaries may employ a known symmetric encryption algorithm to conceal command and control traffic, rather than relying on any inherent protections provided by a communication protocol. Symmetric encryption algorithms use the same key for plaintext encryption and ciphertext decryption. Common symmetric encryption algorithms include AES, Blowfish, and RC4.",
      "url": "https://attack.mitre.org/techniques/T1521/001",
      "created": "05 April 2022",
      "last modified": "05 April 2022",
      "version": "1.0",
      "tactics": "Command and Control",
      "detection": "Since data encryption is a common practice in many legitimate applications and uses standard programming language-specific APIs, encrypting data for command and control communication is regarded as undetectable to the user.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: BlackBerry Bahamut),(Citation: nccgroup_sharkbot_0322),(Citation: securelist rotexy 2018),(Citation: Cybereason EventBot),"
    },
    {
      "ID": "T1633.001",
      "name": "System Checks",
      "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behavior after checking for the presence of artifacts indicative of a virtual environment or sandbox. If the adversary detects a virtual environment, they may alter their malware’s behavior to disengage from the victim or conceal the core functions of the implant. They may also search for virtualization artifacts before dropping secondary or additional payloads. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \n\nHardware checks, such as the presence of motion sensors, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices. ",
      "url": "https://attack.mitre.org/techniques/T1633/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Application vetting services could look for applications attempting to get `android.os.SystemProperties` or `getprop` with the runtime `exec()` commands. This could indicate some level of sandbox evasion, as Google recommends against using system properties within applications.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Trend Micro Anubis),(Citation: Cybereason FakeSpy),(Citation: ThreatFabric Ginp),(Citation: Palo Alto HenBox),(Citation: SecurityIntelligence TrickMo),(Citation: Threat Fabric Cerberus),(Citation: Lookout-Dendroid),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: WhiteOps TERRACOTTA),(Citation: Talos-WolfRAT),(Citation: BlackBerry Bahamut),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1426",
      "name": "System Information Discovery",
      "description": "Adversaries may attempt to get detailed information about a device’s operating system and hardware, including versions, patches, and architecture. Adversaries may use the information from [System Information Discovery](https://attack.mitre.org/techniques/T1426) during automated discovery to shape follow-on behaviors, including whether or not to fully infects the target and/or attempts specific actions. \n\n \n\nOn Android, much of this information is programmatically accessible to applications through the `android.os.Build` class. (Citation: Android-Build) iOS is much more restrictive with what information is visible to applications. Typically, applications will only be able to query the device model and which version of iOS it is running. ",
      "url": "https://attack.mitre.org/techniques/T1426",
      "created": "25 October 2017",
      "last modified": "11 April 2022",
      "version": "1.2",
      "tactics": "Discovery",
      "detection": "System information discovery can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-12",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: Threat Fabric Cerberus),(Citation: paloalto_yispecter_1015),(Citation: Lookout-Pegasus),(Citation: Talos Gustuff Apr 2019),(Citation: Lookout eSurv),(Citation: TrendMicro-Anserver2),(Citation: Trend Micro Bouncing Golf 2019),(Citation: Cybereason FakeSpy),(Citation: Lookout FrozenCell),(Citation: Kaspersky Riltok June 2019),(Citation: trendmicro_tianyspy_0122),(Citation: Xiao-KeyRaider),(Citation: CheckPoint Cerberus),(Citation: SecureList - ViceLeaker 2019),(Citation: Cofense Anubis),(Citation: Talos GPlayed),(Citation: TrendMicro-XLoader-FakeSpy),(Citation: Palo Alto HenBox),(Citation: Lookout-Monokle),(Citation: Securelist Asacub),(Citation: Lookout Desert Scorpion),(Citation: Wandera-RedDrop),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Cybereason EventBot),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: threatfabric_sova_0921),(Citation: SecureList DVMap June 2017),(Citation: FireEye-RuMMS),(Citation: Lookout ViperRAT),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: Threat Fabric Exobot),(Citation: Symantec GoldenCup),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Bitdefender Mandrake),(Citation: securelist rotexy 2018),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1422",
      "name": "System Network Configuration Discovery",
      "description": "Adversaries may look for details about the network configuration and settings, such as IP and/or MAC addresses, of operating systems they access or through information discovery of remote systems. \n\n \n\nOn Android, details of onboard network interfaces are accessible to apps through the `java.net.NetworkInterface` class.(Citation: NetworkInterface) Previously, the Android `TelephonyManager` class could be used to gather telephony-related device identifiers, information such as the IMSI, IMEI, and phone number. However, starting with Android 10, only preloaded, carrier, the default SMS, or device and profile owner applications can access the telephony-related device identifiers.(Citation: TelephonyManager) \n\n \n\nOn iOS, gathering network configuration information is not possible without root access. \n\n \n\nAdversaries may use the information from [System Network Configuration Discovery](https://attack.mitre.org/techniques/T1422) during automated discovery to shape follow-on behaviors, including determining certain access within the target network and what actions to do next. ",
      "url": "https://attack.mitre.org/techniques/T1422",
      "created": "25 October 2017",
      "last modified": "20 March 2023",
      "version": "2.3",
      "tactics": "Discovery",
      "detection": "Application vetting services could look for usage of the `READ_PRIVILEGED_PHONE_STATE` Android permission. This could indicate that non-system apps are attempting to access information that they do not have access to.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Google Project Zero Insomnia),(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: paloalto_yispecter_1015),(Citation: Lookout-PegasusAndroid),(Citation: Talos Gustuff Apr 2019),(Citation: TrendMicro-Anserver2),(Citation: Cybereason FakeSpy),(Citation: Lookout FrozenCell),(Citation: Kaspersky Riltok June 2019),(Citation: trendmicro_tianyspy_0122),(Citation: Google Bread),(Citation: Talos GPlayed),(Citation: TrendMicro-XLoader-FakeSpy),(Citation: Talos-WolfRAT),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Securelist Asacub),(Citation: Wandera-RedDrop),(Citation: Cybereason EventBot),(Citation: WhiteOps TERRACOTTA),(Citation: PaloAlto-SpyDealer),(Citation: PaloAlto-DualToy),(Citation: FireEye-RuMMS),(Citation: Lookout ViperRAT),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: Threat Fabric Exobot),(Citation: Symantec GoldenCup),(Citation: Lookout-EnterpriseApps),(Citation: securelist rotexy 2018),(Citation: lookout_abstractemu_1021),(Citation: TelephonyManager)"
    },
    {
      "ID": "T1421",
      "name": "System Network Connections Discovery",
      "description": "Adversaries may attempt to get a listing of network connections to or from the compromised device they are currently accessing or from remote systems by querying for information over the network. \n\n \n\nThis is typically accomplished by utilizing device APIs to collect information about nearby networks, such as Wi-Fi, Bluetooth, and cellular tower connections. On Android, this can be done by querying the respective APIs: \n\n \n\n* `WifiInfo` for information about the current Wi-Fi connection, as well as nearby Wi-Fi networks. Querying the `WiFiInfo` API requires the application to hold the `ACCESS_FINE_LOCATION` permission. \n\n* `BluetoothAdapter` for information about Bluetooth devices, which also requires the application to hold several permissions granted by the user at runtime. \n\n* For Android versions prior to Q, applications can use the `TelephonyManager.getNeighboringCellInfo()` method. For Q and later, applications can use the `TelephonyManager.getAllCellInfo()` method. Both methods require the application hold the `ACCESS_FINE_LOCATION` permission.",
      "url": "https://attack.mitre.org/techniques/T1421",
      "created": "25 October 2017",
      "last modified": "31 March 2022",
      "version": "2.1",
      "tactics": "Discovery",
      "detection": "System Network Connections Discovery can be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: Cybereason FakeSpy),(Citation: Lookout ViperRAT),(Citation: SWB Exodus March 2019),(Citation: Lookout-Pegasus),(Citation: Lookout-Monokle),(Citation: Lookout Dark Caracal Jan 2018),(Citation: FlexiSpy-Features),"
    },
    {
      "ID": "T1625.001",
      "name": "System Runtime API Hijacking",
      "description": "Adversaries may execute their own malicious payloads by hijacking the way an operating system run applications. Hijacking execution flow can be for the purposes of persistence since this hijacked execution may reoccur at later points in time. \n\n\nOn Android, adversaries may overwrite the standard OS API library with a malicious alternative to hook into core functions to achieve persistence. By doing this, the adversary’s code will be executed every time the overwritten API function is called by an app on the infected device.",
      "url": "https://attack.mitre.org/techniques/T1625/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Persistence",
      "detection": "Mobile threat defense agents could detect unauthorized operating system modifications by using attestation. ",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-27",
      "relationship citations": "(Citation: Google Security Zen),(Citation: SecureList DVMap June 2017),(Citation: FortiGuard-FlexiSpy),(Citation: Android-VerifiedBoot)"
    },
    {
      "ID": "T1641.001",
      "name": "Transmitted Data Manipulation",
      "description": "Adversaries may alter data en route to storage or other systems in order to manipulate external outcomes or hide activity. By manipulating transmitted data, adversaries may attempt to affect a business process, organizational understanding, or decision making.\n\nManipulation may be possible over a network connection or between system processes where there is an opportunity to deploy a tool that will intercept and change information. The type of modification and the impact it will have depends on the target transmission mechanism as well as the goals and objectives of the adversary. For complex systems, an adversary would likely need special expertise and possibly access to specialized software related to the system, typically gained through a prolonged information gathering campaign, in order to have the desired impact.\n\nOne method to achieve [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) is by modifying the contents of the device clipboard. Malicious applications may monitor clipboard activity through the `ClipboardManager.OnPrimaryClipChangedListener` interface on Android to determine when clipboard contents have changed. Listening to clipboard activity, reading clipboard contents, and modifying clipboard contents requires no explicit application permissions and can be performed by applications running in the background. However, this behavior has changed with the release of Android 10.\n\nAdversaries may use [Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) to replace text prior to being pasted. For example, replacing a copied Bitcoin wallet address with a wallet address that is under adversarial control.\n\n[Transmitted Data Manipulation](https://attack.mitre.org/techniques/T1641/001) was seen within the Android/Clipper.C trojan. This sample was detected by ESET in an application distributed through the Google Play Store targeting cryptocurrency wallet numbers.(Citation: ESET Clipboard Modification February 2019)",
      "url": "https://attack.mitre.org/techniques/T1641/001",
      "created": "06 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Impact",
      "detection": "Applications could be vetted for their use of the clipboard manager APIs with extra scrutiny given to application that make use of them.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: threatfabric_sova_0921),(Citation: Android 10 Privacy Changes)"
    },
    {
      "ID": "T1635.001",
      "name": "URI Hijacking",
      "description": "Adversaries may register Uniform Resource Identifiers (URIs) to intercept sensitive data. \n\nApplications regularly register URIs with the operating system to act as a response handler for various actions, such as logging into an app using an external account via single sign-on. This allows redirections to that specific URI to be intercepted by the application. If an adversary were to register for a URI that was already in use by a genuine application, the adversary may be able to intercept data intended for the genuine application or perform a phishing attack against the genuine application. Intercepted data may include OAuth authorization codes or tokens that could be used by the adversary to gain access to protected resources.(Citation: Trend Micro iOS URL Hijacking)(Citation: IETF-PKCE) ",
      "url": "https://attack.mitre.org/techniques/T1635/001",
      "created": "01 April 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "contributors": "Leo Zhang, Trend Micro; Steven Du, Trend Micro",
      "tactics": "Credential Access",
      "detection": "On Android, users may be presented with a popup to select the appropriate application to open the URI in. If the user sees an application they do not recognize, they can remove it. When vetting applications for potential security weaknesses, the vetting process could look for insecure use of Intents. Developers should be encouraged to use techniques to ensure that the intent can only be sent to an appropriate destination (e.g., use explicit rather than implicit intents, permission checking, checking of the destination app's signing certificate, or utilizing the App Links feature). For mobile applications using OAuth, encourage use of best practice. (Citation: IETF-OAuthNativeApps)(Citation: Android-AppLinks)",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ",(Citation: IETF-PKCE),(Citation: Android App Links),(Citation: iOS Universal Links),(Citation: Trend Micro iOS URL Hijacking)"
    },
    {
      "ID": "T1630.001",
      "name": "Uninstall Malicious Application",
      "description": "Adversaries may include functionality in malware that uninstalls the malicious application from the device. This can be achieved by: \n \n* Abusing device owner permissions to perform silent uninstallation using device owner API calls. \n* Abusing root permissions to delete files from the filesystem. \n* Abusing the accessibility service. This requires sending an intent to the system to request uninstallation, and then abusing the accessibility service to click the proper places on the screen to confirm uninstallation.",
      "url": "https://attack.mitre.org/techniques/T1630/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Users can see a list of applications that can use accessibility services in the device settings. Application vetting services could look for use of the accessibility service or features that typically require root access.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-43",
      "relationship citations": "(Citation: nccgroup_sharkbot_0322),(Citation: Threat Fabric Cerberus),(Citation: threatfabric_sova_0921),(Citation: SecurityIntelligence TrickMo),"
    },
    {
      "ID": "T1623.001",
      "name": "Unix Shell",
      "description": "Adversaries may abuse Unix shell commands and scripts for execution. Unix shells are the underlying command prompts on Android and iOS devices. Unix shells can control every aspect of a system, with certain commands requiring elevated privileges that are only accessible if the device has been rooted or jailbroken. \n\nUnix shells also support scripts that enable sequential execution of commands as well as other typical programming operations such as conditionals and loops. Common uses of shell scripts include long or repetitive tasks, or the need to run the same set of commands on multiple systems. \n\nAdversaries may abuse Unix shells to execute various commands or payloads. Interactive shells may be accessed through command and control channels or during lateral movement such as with SSH. Adversaries may also leverage shell scripts to deliver and execute multiple commands on victims or as part of payloads used for persistence. \n\nIf the device has been rooted or jailbroken, adversaries may locate and invoke a superuser binary to elevate their privileges and interact with the system as the root user. This dangerous level of permissions allows the adversary to run special commands and modify protected system files.  ",
      "url": "https://attack.mitre.org/techniques/T1623/001",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Execution",
      "detection": "Command-line activities can potentially be detected through Mobile Threat Defense integrations with lower-level OS APIs. This could grant the MTD agents access to running processes and their parameters, potentially detecting unwanted or malicious shells.\n\nApplication vetting services could detect the invocations of methods that could be used to execute shell commands.(Citation: Samsung Knox Mobile Threat Defense)",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: Lookout Uyghur Campaign),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: Palo Alto HenBox),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1628.002",
      "name": "User Evasion",
      "description": "Adversaries may attempt to avoid detection by hiding malicious behavior from the user. By doing this, an adversary’s modifications would most likely remain installed on the device for longer, allowing the adversary to continue to operate on that device. \n\nWhile there are many ways this can be accomplished, one method is by using the device’s sensors. By utilizing the various motion sensors on a device, such as accelerometer or gyroscope, an application could detect that the device is being interacted with. That way, the application could continue to run while the device is not in use but cease operating while the user is using the device, hiding anything that would indicate malicious activity was ongoing. Accessing the sensors in this way does not require any permissions from the user, so it would be completely transparent.",
      "url": "https://attack.mitre.org/techniques/T1628/002",
      "created": "11 April 2022",
      "last modified": "11 April 2022",
      "version": "1.0",
      "tactics": "Defense Evasion",
      "detection": "Mobile security products may be able to detect some forms of user evasion. Otherwise, the act of hiding malicious activity could be difficult to detect, and therefore enterprises may be better served focusing on detection at other stages of adversarial behavior.",
      "platforms": "Android",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: proofpoint_flubot_0421),"
    },
    {
      "ID": "T1512",
      "name": "Video Capture",
      "description": "An adversary can leverage a device’s cameras to gather information by capturing video recordings. Images may also be captured, potentially in specified intervals, in lieu of video files.  \n\n \n\nMalware or scripts may interact with the device cameras through an available API provided by the operating system. Video or image files may be written to disk and exfiltrated later. This technique differs from [Screen Capture](https://attack.mitre.org/techniques/T1513) due to use of the device’s cameras for video recording rather than capturing the victim’s screen. \n\n \n\nIn Android, an application must hold the `android.permission.CAMERA` permission to access the cameras. In iOS, applications must include the `NSCameraUsageDescription` key in the `Info.plist` file. In both cases, the user must grant permission to the requesting application to use the camera. If the device has been rooted or jailbroken, an adversary may be able to access the camera without knowledge of the user.  ",
      "url": "https://attack.mitre.org/techniques/T1512",
      "created": "09 August 2019",
      "last modified": "20 March 2023",
      "version": "2.1",
      "tactics": "CollectionN",
      "detection": "The user can view which applications have permission to use the camera through the device settings screen, where the user can then choose to revoke the permissions. During the vetting process, applications using the Android permission `android.permission.CAMERA`, or the iOS `NSCameraUsageDescription` plist entry could be given closer scrutiny. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-19",
      "relationship citations": "(Citation: SecureList BusyGasper),(Citation: TrendMicro Coronavirus Updates),(Citation: CyberMerchants-FlexiSpy),(Citation: TrendMicro-RCSAndroid),(Citation: Lookout-PegasusAndroid),(Citation: Trend Micro Bouncing Golf 2019),(Citation: cloudmark_tanglebot_0921),(Citation: SecureList - ViceLeaker 2019),(Citation: Lookout-Dendroid),(Citation: Talos-WolfRAT),(Citation: Palo Alto HenBox),(Citation: Lookout-StealthMango),(Citation: Lookout-Monokle),(Citation: Zscaler-SuperMarioRun),(Citation: Kaspersky-Skygofree),(Citation: Lookout Desert Scorpion),(Citation: BlackBerry Bahamut),(Citation: Lookout Dark Caracal Jan 2018),(Citation: PaloAlto-SpyDealer),(Citation: Lookout ViperRAT),(Citation: Lookout Uyghur Campaign),(Citation: SWB Exodus March 2019),(Citation: Symantec GoldenCup),(Citation: Zscaler TikTok Spyware),(Citation: lookout_abstractemu_1021),(Citation: Android Capture Sensor 2019)"
    },
    {
      "ID": "T1633",
      "name": "Virtualization/Sandbox Evasion",
      "description": "Adversaries may employ various means to detect and avoid virtualization and analysis environments. This may include changing behaviors after checking for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware’s behavior to disengage from the victim or conceal the core functions of the payload. They may also search for VME artifacts before dropping further payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1633) during automated discovery to shape follow-on behaviors. \n\nAdversaries may use several methods to accomplish [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1633) such as checking for system artifacts associated with analysis or virtualization. Adversaries may also check for legitimate user activity to help determine if it is in an analysis environment. ",
      "url": "https://attack.mitre.org/techniques/T1633",
      "created": "30 March 2022",
      "last modified": "20 March 2023",
      "version": "1.1",
      "tactics": "Defense Evasion",
      "detection": "Application vetting services could look for applications attempting to get `android.os.SystemProperties` or `getprop` with the runtime `exec()` commands. This could indicate some level of sandbox evasion, as Google recommends against using system properties within applications.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": "(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1437.001",
      "name": "Web Protocols",
      "description": "Adversaries may communicate using application layer protocols associated with web protocols traffic to avoid detection/network filtering by blending in with existing traffic. Commands to remote mobile devices, and often the results of those commands, will be embedded within the protocol traffic between the mobile client and server. \n\nWeb protocols such as HTTP and HTTPS are used for web traffic as well as well as notification services native to mobile messaging services such as Google Cloud Messaging (GCM) and newly, Firebase Cloud Messaging (FCM), (GCM/FCM: two-way communication) and Apple Push Notification Service (APNS; one-way server-to-device).  Such notification services leverage HTTP/S via the respective API and are commonly abused on Android and iOS respectively in order blend in with routine device traffic making it difficult for enterprises to inspect. ",
      "url": "https://attack.mitre.org/techniques/T1437/001",
      "created": "01 April 2022",
      "last modified": "06 April 2022",
      "version": "1.0",
      "tactics": "Command and Control",
      "detection": "Abuse of standard application protocols can be difficult to detect as many legitimate mobile applications leverage such protocols for language-specific APIs. Enterprises may be better served focusing on detection at other stages of adversarial behavior. ",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "MTC ID": "APP-29",
      "relationship citations": "(Citation: SecurityIntelligence TrickMo),(Citation: TrendMicro Coronavirus Updates),(Citation: paloalto_yispecter_1015),(Citation: Talos Gustuff Apr 2019),(Citation: Sophos Red Alert 2.0),(Citation: Cybereason FakeSpy),(Citation: Kaspersky Riltok June 2019),(Citation: SecureList - ViceLeaker 2019),(Citation: CheckPoint Cerberus),(Citation: Volexity Insomnia),(Citation: Google Bread),(Citation: Talos GPlayed),(Citation: ESET DEFENSOR ID),(Citation: Securelist Asacub),(Citation: Kaspersky-Skygofree),(Citation: Kaspersky-MobileMalware),(Citation: Wandera-RedDrop),(Citation: WeLiveSecurity AdDisplayAshas),(Citation: Cybereason EventBot),(Citation: Lookout Dark Caracal Jan 2018),(Citation: threatfabric_sova_0921),(Citation: proofpoint_flubot_0421),(Citation: FireEye-RuMMS),(Citation: Kaspersky-WUC),(Citation: Lookout Uyghur Campaign),(Citation: nccgroup_sharkbot_0322),(Citation: Bitdefender - Triout 2018),(Citation: SWB Exodus March 2019),(Citation: Threat Fabric Exobot),(Citation: Symantec GoldenCup),(Citation: CYBERWARCON CHEMISTGAMES),(Citation: securelist rotexy 2018),(Citation: lookout_abstractemu_1021),"
    },
    {
      "ID": "T1481",
      "name": "Web Service",
      "description": "Adversaries may use an existing, legitimate external Web service as a means for relaying data to/from a compromised system. Popular websites and social media, acting as a mechanism for C2, may give a significant amount of cover. This is due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection. \n\n \n\nUse of Web services may also protect back-end C2 infrastructure from discovery through malware binary analysis, or enable operational resiliency (since this infrastructure may be dynamically changed). \n\n ",
      "url": "https://attack.mitre.org/techniques/T1481",
      "created": "01 February 2019",
      "last modified": "20 March 2023",
      "version": "1.2",
      "tactics": "Command and Control",
      "detection": "Application vetting services may provide a list of connections made or received by an application, or a list of domains contacted by the application.",
      "platforms": "Android, iOS",
      "tactic type": "Post-Adversary Device Access",
      "relationship citations": ","
    },
  {
      "ID": "TA0035",
      "name": "CollectionN",
      "description": "The adversary is trying to gather data of interest to their goal. CollectionN consists of techniques used to identify and gather information, such as sensitive files, from a target network prior to exfiltration. This category also covers locations on a system or network where the adversary may look for information to exfiltrate.",
      "url": "https://attack.mitre.org/tactics/TA0035",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0037",
      "name": "Command and Control",
      "description": "The adversary is trying to communicate with compromised devices to control them.\n\nThe command and control tactic represents how adversaries communicate with systems under their control within a target network. There are many ways an adversary can establish command and control with various levels of covertness, depending on system configuration and network topology. Due to the wide degree of variation available to the adversary at the network level, only the most common factors were used to describe the differences in command and control. There are still a great many specific techniques within the documented methods, largely due to how easy it is to define new protocols and use existing, legitimate protocols and network services for communication. \n\nThe resulting breakdown should help convey the concept that detecting intrusion through command and control protocols without prior knowledge is a difficult proposition over the long term. Adversaries' main constraints in network-level defense avoidance are testing and deployment of tools to rapidly change their protocols, awareness of existing defensive technologies, and access to legitimate Web services that, when used appropriately, make their tools difficult to distinguish from benign traffic.\n\nAdditionally, in the mobile environment, mobile devices are frequently connected to networks outside enterprise control such as cellular networks or public Wi-Fi networks. Adversaries could attempt to evade detection by communicating on these networks, and potentially even by using non-Internet Protocol mechanisms such as Short Message Service (SMS). However, cellular networks often have data caps and/or extra data charges that could increase the potential for adversarial communication to be detected.",
      "url": "https://attack.mitre.org/tactics/TA0037",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0031",
      "name": "Credential Access",
      "description": "The adversary is trying to steal account names, passwords, or other secrets that enable access to resources.\n\nCredential access represents techniques that can be used by adversaries to obtain access to or control over passwords, tokens, cryptographic keys, or other values that could be used by an adversary to gain unauthorized access to resources. Credential access allows the adversary to assume the identity of an account, with all of that account's permissions on the system and network, and makes it harder for defenders to detect the adversary. With sufficient access within a network, an adversary can create accounts for later use within the environment.",
      "url": "https://attack.mitre.org/tactics/TA0031",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0030",
      "name": "Defense Evasion",
      "description": " The adversary is trying to avoid being detected.\n\nDefense evasion consists of techniques an adversary may use to evade detection or avoid other defenses. Sometimes these actions are the same as or variations of techniques in other categories that have the added benefit of subverting a particular defense or mitigation. Defense evasion may be considered a set of attributes the adversary applies to all other phases of the operation.",
      "url": "https://attack.mitre.org/tactics/TA0030",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0032",
      "name": "Discovery",
      "description": "The adversary is trying to figure out your environment.\n\nDiscovery consists of techniques that allow the adversary to gain knowledge about the characteristics of the mobile device and potentially other networked systems. When adversaries gain access to a new system, they must orient themselves to what they now have control of and what benefits operating from that system give to their current objective or overall goals during the intrusion. The operating system may provide capabilities that aid in this post-compromise information-gathering phase.",
      "url": "https://attack.mitre.org/tactics/TA0032",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0041",
      "name": "Execution",
      "description": "The adversary is trying to run malicious code.\n\nExecution consists of techniques that result in adversary-controlled code running on a mobile device. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data.",
      "url": "https://attack.mitre.org/tactics/TA0041",
      "created": "27 January 2020",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0036",
      "name": "Exfiltration",
      "description": "The adversary is trying to steal data.\n\nExfiltration refers to techniques and attributes that result or aid in the adversary removing files and information from the targeted mobile device.\n\nIn the mobile environment, mobile devices are frequently connected to networks outside enterprise control such as cellular networks or public Wi-Fi networks. Adversaries could attempt to evade detection by communicating on these networks, and potentially even by using non-Internet Protocol mechanisms such as Short Message Service (SMS). However, cellular networks often have data caps and/or extra data charges that could increase the potential for adversarial communication to be detected.",
      "url": "https://attack.mitre.org/tactics/TA0036",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0034",
      "name": "Impact",
      "description": "The adversary is trying to manipulate, interrupt, or destroy your devices and data.\n\nThe impact tactic consists of techniques used by the adversary to execute his or her mission objectives but that do not cleanly fit into another category such as CollectionN. Mission objectives vary based on each adversary's goals, but examples include toll fraud, destruction of device data, or locking the user out of his or her device until a ransom is paid.",
      "url": "https://attack.mitre.org/tactics/TA0034",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0027",
      "name": "Initial Access",
      "description": "The adversary is trying to get into your device.\n\nThe initial access tactic represents the vectors adversaries use to gain an initial foothold onto a mobile device.",
      "url": "https://attack.mitre.org/tactics/TA0027",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0033",
      "name": "Lateral Movement",
      "description": "The adversary is trying to move through your environment.\n\nLateral movement consists of techniques that enable an adversary to access and control remote systems on a network and could, but does not necessarily, include execution of tools on remote systems. The lateral movement techniques could allow an adversary to gather information from a system without needing additional tools, such as a remote access tool.",
      "url": "https://attack.mitre.org/tactics/TA0033",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0028",
      "name": "Persistence",
      "description": " The adversary is trying to maintain their foothold.\n\nPersistence is any access, action, or configuration change to a mobile device that gives an attacker a persistent presence on the device. Attackers often will need to maintain access to mobile devices through interruptions such as device reboots and potentially even factory data resets.",
      "url": "https://attack.mitre.org/tactics/TA0028",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "TA0029",
      "name": "Privilege Escalation",
      "description": " The adversary is trying to gain higher-level permissions.\n\nPrivilege escalation includes techniques that allow an attacker to obtain a higher level of permissions on the mobile device. Attackers may enter the mobile device with very limited privileges and may be required to take advantage of a device weakness to obtain higher privileges necessary to successfully carry out their mission objectives.",
      "url": "https://attack.mitre.org/tactics/TA0029",
      "created": "17 October 2018",
      "last modified": "27 January 2020",
      "version": "1.0"
    },
    {
      "ID": "S0310",
      "name": "ANDROIDOS_ANSERVER.A",
      "description": "[ANDROIDOS_ANSERVER.A](https://attack.mitre.org/software/S0310) is Android malware that is unique because it uses encrypted content within a blog site for command and control. (Citation: TrendMicro-Anserver)",
      "url": "https://attack.mitre.org/software/S0310",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.3",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-Anserver2),(Citation: TrendMicro-Anserver)"
    },
    {
      "ID": "S1061",
      "name": "AbstractEmu",
      "description": "[AbstractEmu](https://attack.mitre.org/software/S1061) is mobile malware that was first seen in Google Play and other third-party stores in October 2021. It was discovered in 19 Android applications, of which at least 7 abused known Android exploits for obtaining root permissions. [AbstractEmu](https://attack.mitre.org/software/S1061) was observed primarily impacting users in the United States, however victims are believed to be across a total of 17 countries.(Citation: lookout_abstractemu_1021)",
      "url": "https://attack.mitre.org/software/S1061",
      "created": "06 February 2023",
      "last modified": "13 April 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: lookout_abstractemu_1021)"
    },
    {
      "ID": "S0309",
      "name": "Adups",
      "description": "[Adups](https://attack.mitre.org/software/S0309) is software that was pre-installed onto Android devices, including those made by BLU Products. The software was reportedly designed to help a Chinese phone manufacturer monitor user behavior, transferring sensitive data to a Chinese server. (Citation: NYTimes-BackDoor) (Citation: BankInfoSecurity-BackDoor)",
      "url": "https://attack.mitre.org/software/S0309",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: BankInfoSecurity-BackDoor),(Citation: NYTimes-BackDoor)"
    },
    {
      "ID": "S0440",
      "name": "Agent Smith",
      "description": "[Agent Smith](https://attack.mitre.org/software/S0440) is mobile malware that generates financial gain by replacing legitimate applications on devices with malicious versions that include fraudulent ads. As of July 2019 [Agent Smith](https://attack.mitre.org/software/S0440) had infected around 25 million devices, primarily targeting India though effects had been observed in other Asian countries as well as Saudi Arabia, the United Kingdom, and the United States.(Citation: CheckPoint Agent Smith)",
      "url": "https://attack.mitre.org/software/S0440",
      "created": "07 May 2020",
      "last modified": "17 June 2020",
      "version": "1.0",
      "contributors": "Aviran Hazum, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: CheckPoint Agent Smith)"
    },
    {
      "ID": "S0319",
      "name": "Allwinner",
      "description": "[Allwinner](https://attack.mitre.org/software/S0319) is a company that supplies processors used in Android tablets and other devices. A Linux kernel distributed by [Allwinner](https://attack.mitre.org/software/S0319) for use on these devices reportedly contained a backdoor. (Citation: HackerNews-Allwinner)",
      "url": "https://attack.mitre.org/software/S0319",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: HackerNews-Allwinner)"
    },
    {
      "ID": "S0292",
      "name": "AndroRAT",
      "description": "[AndroRAT](https://attack.mitre.org/software/S0292) is malware that allows a third party to control the device and collect information. (Citation: Lookout-EnterpriseApps)",
      "url": "https://attack.mitre.org/software/S0292",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-EnterpriseApps)"
    },
    {
      "ID": "S0525",
      "name": "Android/AdDisplay.Ashas",
      "description": "[Android/AdDisplay.Ashas](https://attack.mitre.org/software/S0525) is a variant of adware that has been distributed through multiple apps in the Google Play Store. (Citation: WeLiveSecurity AdDisplayAshas)",
      "url": "https://attack.mitre.org/software/S0525",
      "created": "29 October 2020",
      "last modified": "29 October 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: WeLiveSecurity AdDisplayAshas)"
    },
    {
      "ID": "S0304",
      "name": "Android/Chuli.A",
      "description": "[Android/Chuli.A](https://attack.mitre.org/software/S0304) is Android malware that was delivered to activist groups via a spearphishing email with an attachment. (Citation: Kaspersky-WUC)",
      "url": "https://attack.mitre.org/software/S0304",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky-WUC)"
    },
    {
      "ID": "S0524",
      "name": "AndroidOS/MalLocker.B",
      "description": "[AndroidOS/MalLocker.B](https://attack.mitre.org/software/S0524) is a variant of a ransomware family targeting Android devices. It prevents the user from interacting with the UI by displaying a screen containing a ransom note over all other windows. (Citation: Microsoft MalLockerB)",
      "url": "https://attack.mitre.org/software/S0524",
      "created": "29 October 2020",
      "last modified": "29 October 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Microsoft MalLockerB)"
    },
    {
      "ID": "S0422",
      "name": "Anubis",
      "description": "[Anubis](https://attack.mitre.org/software/S0422) is Android malware that was originally used for cyber espionage, and has been retooled as a banking trojan.(Citation: Cofense Anubis)",
      "url": "https://attack.mitre.org/software/S0422",
      "created": "08 April 2020",
      "last modified": "20 September 2021",
      "version": "1.3",
      "contributors": "Aviran Hazum, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Zimperium z9),(Citation: Trend Micro Anubis),(Citation: Cofense Anubis)"
    },
    {
      "ID": "S0540",
      "name": "Asacub",
      "description": "[Asacub](https://attack.mitre.org/software/S0540) is a banking trojan that attempts to steal money from victims’ bank accounts. It attempts to do this by initiating a wire transfer via SMS message from compromised devices.(Citation: Securelist Asacub)",
      "url": "https://attack.mitre.org/software/S0540",
      "created": "14 December 2020",
      "last modified": "16 December 2020",
      "version": "1.0",
      "platforms": "Android",
      "aliases": "Trojan-SMS.AndroidOS.Smaps",
      "type": "malware",
      "relationship citations": ",(Citation: Securelist Asacub)"
    },
    {
      "ID": "S0293",
      "name": "BrainTest",
      "description": "[BrainTest](https://attack.mitre.org/software/S0293) is a family of Android malware. (Citation: CheckPoint-BrainTest) (Citation: Lookout-BrainTest)",
      "url": "https://attack.mitre.org/software/S0293",
      "created": "25 October 2017",
      "last modified": "15 April 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-BrainTest)"
    },
    {
      "ID": "S0432",
      "name": "Bread",
      "description": "[Bread](https://attack.mitre.org/software/S0432) was a large-scale billing fraud malware family known for employing many different cloaking and obfuscation techniques in an attempt to continuously evade Google Play Store’s malware detection. 1,700 unique Bread apps were detected and removed from the Google Play Store before being downloaded by users.(Citation: Google Bread)",
      "url": "https://attack.mitre.org/software/S0432",
      "created": "04 May 2020",
      "last modified": "21 April 2023",
      "version": "1.2",
      "contributors": "Aviran Hazum, Check Point; Jonathan Shimonovich, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "aliases": "Joker",
      "type": "malware",
      "relationship citations": ",(Citation: Google Bread),(Citation: Check Point-Joker)"
    },
    {
      "ID": "S0655",
      "name": "BusyGasper",
      "description": "[BusyGasper](https://attack.mitre.org/software/S0655) is Android spyware that has been in use since May 2016. There have been less than 10 victims, all who appear to be located in Russia, that were all infected via physical access to the device.(Citation: SecureList BusyGasper)",
      "url": "https://attack.mitre.org/software/S0655",
      "created": "01 October 2021",
      "last modified": "28 March 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: SecureList BusyGasper)"
    },
    {
      "ID": "S0555",
      "name": "CHEMISTGAMES",
      "description": "[CHEMISTGAMES](https://attack.mitre.org/software/S0555) is a modular backdoor that has been deployed by [Sandworm Team](https://attack.mitre.org/groups/G0034).(Citation: CYBERWARCON CHEMISTGAMES)",
      "url": "https://attack.mitre.org/software/S0555",
      "created": "31 December 2020",
      "last modified": "25 March 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": "(Citation: CYBERWARCON CHEMISTGAMES),(Citation: CYBERWARCON CHEMISTGAMES)"
    },
    {
      "ID": "S0529",
      "name": "CarbonSteal",
      "description": "[CarbonSteal](https://attack.mitre.org/software/S0529) is one of a family of four surveillanceware tools that share a common C2 infrastructure. [CarbonSteal](https://attack.mitre.org/software/S0529) primarily deals with audio surveillance. (Citation: Lookout Uyghur Campaign)",
      "url": "https://attack.mitre.org/software/S0529",
      "created": "10 November 2020",
      "last modified": "20 September 2021",
      "version": "1.1",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout Uyghur Campaign)"
    },
    {
      "ID": "S0480",
      "name": "Cerberus",
      "description": "[Cerberus](https://attack.mitre.org/software/S0480) is a banking trojan whose usage can be rented on underground forums and marketplaces. Prior to being available to rent, the authors of [Cerberus](https://attack.mitre.org/software/S0480) claim was used in private operations for two years.(Citation: Threat Fabric Cerberus)",
      "url": "https://attack.mitre.org/software/S0480",
      "created": "26 June 2020",
      "last modified": "11 September 2020",
      "version": "1.1",
      "contributors": "Aviran Hazum, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Threat Fabric Cerberus),(Citation: CheckPoint Cerberus)"
    },
    {
      "ID": "S0323",
      "name": "Charger",
      "description": "[Charger](https://attack.mitre.org/software/S0323) is Android malware that steals steals contacts and SMS messages from the user's device. It can also lock the device and demand ransom payment if it receives admin permissions. (Citation: CheckPoint-Charger)",
      "url": "https://attack.mitre.org/software/S0323",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.1",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: CheckPoint-Charger)"
    },
    {
      "ID": "S0602",
      "name": "Circles",
      "description": "[Circles](https://attack.mitre.org/software/S0602) reportedly takes advantage of Signaling System 7 (SS7) weaknesses, the protocol suite used to route phone calls, to both track the location of mobile devices and intercept voice calls and SMS messages. It can be connected to a telecommunications company’s infrastructure or purchased as a cloud service. Circles has reportedly been linked to the NSO Group.(Citation: CitizenLab Circles)",
      "url": "https://attack.mitre.org/software/S0602",
      "created": "26 April 2021",
      "last modified": "26 April 2021",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: CitizenLab Circles)"
    },
    {
      "ID": "S0426",
      "name": "Concipit1248",
      "description": "[Concipit1248](https://attack.mitre.org/software/S0426) is iOS spyware that was discovered using the same name as the developer of the Android spyware [Corona Updates](https://attack.mitre.org/software/S0425). Further investigation revealed that the two pieces of software contained the same C2 URL and similar functionality.(Citation: TrendMicro Coronavirus Updates)",
      "url": "https://attack.mitre.org/software/S0426",
      "created": "24 April 2020",
      "last modified": "30 April 2020",
      "version": "1.0",
      "platforms": "iOS",
      "aliases": "Corona Updates",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro Coronavirus Updates)"
    },
    {
      "ID": "S0425",
      "name": "Corona Updates",
      "description": "[Corona Updates](https://attack.mitre.org/software/S0425) is Android spyware that took advantage of the Coronavirus pandemic. The campaign distributing this spyware is tracked as Project Spy. Multiple variants of this spyware have been discovered to have been hosted on the Google Play Store.(Citation: TrendMicro Coronavirus Updates)",
      "url": "https://attack.mitre.org/software/S0425",
      "created": "24 April 2020",
      "last modified": "11 September 2020",
      "version": "1.1",
      "platforms": "Android",
      "aliases": "Concipit1248, Wabi Music",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro Coronavirus Updates)"
    },
    {
      "ID": "S0479",
      "name": "DEFENSOR ID",
      "description": "[DEFENSOR ID](https://attack.mitre.org/software/S0479) is a banking trojan capable of clearing a victim’s bank account or cryptocurrency wallet and taking over email or social media accounts. [DEFENSOR ID](https://attack.mitre.org/software/S0479) performs the majority of its malicious functionality by abusing Android’s accessibility service.(Citation: ESET DEFENSOR ID) ",
      "url": "https://attack.mitre.org/software/S0479",
      "created": "26 June 2020",
      "last modified": "26 June 2020",
      "version": "1.0",
      "contributors": "Lukáš Štefanko, ESET",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: ESET DEFENSOR ID)"
    },
    {
      "ID": "S0301",
      "name": "Dendroid",
      "description": "[Dendroid](https://attack.mitre.org/software/S0301) is an Android remote access tool (RAT) primarily targeting Western countries. The RAT was available for purchase for $300 and came bundled with a utility to inject the RAT into legitimate applications.(Citation: Lookout-Dendroid)",
      "url": "https://attack.mitre.org/software/S0301",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "2.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-Dendroid)"
    },
    {
      "ID": "S0505",
      "name": "Desert Scorpion",
      "description": "[Desert Scorpion](https://attack.mitre.org/software/S0505) is surveillanceware that has targeted the Middle East, specifically individuals located in Palestine. [Desert Scorpion](https://attack.mitre.org/software/S0505) is suspected to have been operated by the threat actor APT-C-23.(Citation: Lookout Desert Scorpion) ",
      "url": "https://attack.mitre.org/software/S0505",
      "created": "11 September 2020",
      "last modified": "19 April 2021",
      "version": "1.1",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout Desert Scorpion)"
    },
    {
      "ID": "S0550",
      "name": "DoubleAgent",
      "description": "[DoubleAgent](https://attack.mitre.org/software/S0550) is a family of RAT malware dating back to 2013, known to target groups with contentious relationships with the Chinese government.(Citation: Lookout Uyghur Campaign)",
      "url": "https://attack.mitre.org/software/S0550",
      "created": "24 December 2020",
      "last modified": "19 April 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout Uyghur Campaign)"
    },
    {
      "ID": "S0300",
      "name": "DressCode",
      "description": "[DressCode](https://attack.mitre.org/software/S0300) is an Android malware family. (Citation: TrendMicro-DressCode)",
      "url": "https://attack.mitre.org/software/S0300",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-DressCode)"
    },
    {
      "ID": "S1054",
      "name": "Drinik",
      "description": "[Drinik](https://attack.mitre.org/software/S1054) is an evolving Android banking trojan that was observed targeting customers of around 27 banks in India in August 2021. Initially seen as an SMS stealer in 2016, [Drinik](https://attack.mitre.org/software/S1054) resurfaced as a banking trojan with more advanced capabilities included in subsequent versions between September 2021 and August 2022.(Citation: cyble_drinik_1022)",
      "url": "https://attack.mitre.org/software/S1054",
      "created": "18 January 2023",
      "last modified": "13 April 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: cyble_drinik_1022)"
    },
    {
      "ID": "S0320",
      "name": "DroidJack",
      "description": "[DroidJack](https://attack.mitre.org/software/S0320) is an Android remote access tool that has been observed posing as legitimate applications including the Super Mario Run and Pokemon GO games. (Citation: Zscaler-SuperMarioRun) (Citation: Proofpoint-Droidjack)",
      "url": "https://attack.mitre.org/software/S0320",
      "created": "25 October 2017",
      "last modified": "20 May 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Zscaler-SuperMarioRun)"
    },
    {
      "ID": "S0315",
      "name": "DualToy",
      "description": "[DualToy](https://attack.mitre.org/software/S0315) is Windows malware that installs malicious applications onto Android and iOS devices connected over USB. (Citation: PaloAlto-DualToy)",
      "url": "https://attack.mitre.org/software/S0315",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: PaloAlto-DualToy)"
    },
    {
      "ID": "S0420",
      "name": "Dvmap",
      "description": "[Dvmap](https://attack.mitre.org/software/S0420) is rooting malware that injects malicious code into system runtime libraries. It is credited with being the first malware that performs this type of code injection.(Citation: SecureList DVMap June 2017)",
      "url": "https://attack.mitre.org/software/S0420",
      "created": "10 December 2019",
      "last modified": "22 January 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: SecureList DVMap June 2017)"
    },
    {
      "ID": "S0478",
      "name": "EventBot",
      "description": "[EventBot](https://attack.mitre.org/software/S0478) is an Android banking trojan and information stealer that abuses Android’s accessibility service to steal data from various applications.(Citation: Cybereason EventBot) [EventBot](https://attack.mitre.org/software/S0478) was designed to target over 200 different banking and financial applications, the majority of which are European bank and cryptocurrency exchange applications.(Citation: Cybereason EventBot)",
      "url": "https://attack.mitre.org/software/S0478",
      "created": "26 June 2020",
      "last modified": "26 June 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Cybereason EventBot)"
    },
    {
      "ID": "S0522",
      "name": "Exobot",
      "description": "[Exobot](https://attack.mitre.org/software/S0522) is Android banking malware, primarily targeting financial institutions in Germany, Austria, and France.(Citation: Threat Fabric Exobot)",
      "url": "https://attack.mitre.org/software/S0522",
      "created": "29 October 2020",
      "last modified": "07 December 2020",
      "version": "1.0",
      "platforms": "Android",
      "aliases": "Marcher",
      "type": "malware",
      "relationship citations": ",(Citation: Threat Fabric Exobot)"
    },
    {
      "ID": "S0405",
      "name": "Exodus",
      "description": "[Exodus](https://attack.mitre.org/software/S0405) is Android spyware deployed in two distinct stages named Exodus One (dropper) and Exodus Two (payload).(Citation: SWB Exodus March 2019)",
      "url": "https://attack.mitre.org/software/S0405",
      "created": "03 September 2019",
      "last modified": "14 October 2019",
      "version": "1.0",
      "platforms": "Android",
      "aliases": "Exodus One, Exodus Two",
      "type": "malware",
      "relationship citations": ",(Citation: SWB Exodus March 2019)"
    },
    {
      "ID": "S0509",
      "name": "FakeSpy",
      "description": "[FakeSpy](https://attack.mitre.org/software/S0509) is Android spyware that has been operated by the Chinese threat actor behind the Roaming Mantis campaigns.(Citation: Cybereason FakeSpy)",
      "url": "https://attack.mitre.org/software/S0509",
      "created": "15 September 2020",
      "last modified": "06 October 2020",
      "version": "1.0",
      "contributors": "Ofir Almkias, Cybereason",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Cybereason FakeSpy)"
    },
    {
      "ID": "S0182",
      "name": "FinFisher",
      "description": "[FinFisher](https://attack.mitre.org/software/S0182) is a government-grade commercial surveillance spyware reportedly sold exclusively to government agencies for use in targeted and lawful criminal investigations. It is heavily obfuscated and uses multiple anti-analysis techniques. It has other variants including [Wingbird](https://attack.mitre.org/software/S0176). (Citation: FinFisher Citation) (Citation: Microsoft SIR Vol 21) (Citation: FireEye FinSpy Sept 2017) (Citation: Securelist BlackOasis Oct 2017) (Citation: Microsoft FinFisher March 2018)",
      "url": "https://attack.mitre.org/software/S0182",
      "created": "16 January 2018",
      "last modified": "02 March 2022",
      "version": "1.4",
      "platforms": "Android, Windows",
      "aliases": "FinSpy",
      "type": "malware",
      "relationship citations": "(Citation: Lookout Dark Caracal Jan 2018),(Citation: Lookout Dark Caracal Jan 2018)"
    },
    {
      "ID": "S0408",
      "name": "FlexiSpy",
      "description": "[FlexiSpy](https://attack.mitre.org/software/S0408) is sophisticated surveillanceware for iOS and Android. Publicly-available, comprehensive analysis has only been found for the Android version.(Citation: FortiGuard-FlexiSpy)(Citation: CyberMerchants-FlexiSpy)\n\n[FlexiSpy](https://attack.mitre.org/software/S0408) markets itself as a parental control and employee monitoring application.(Citation: FlexiSpy-Website)",
      "url": "https://attack.mitre.org/software/S0408",
      "created": "04 September 2019",
      "last modified": "14 October 2019",
      "version": "1.0",
      "contributors": "Emily Ratliff, IBM",
      "platforms": "Android",
      "type": "tool",
      "relationship citations": ",(Citation: CyberMerchants-FlexiSpy),(Citation: FlexiSpy-Features),(Citation: FortiGuard-FlexiSpy)"
    },
    {
      "ID": "S1067",
      "name": "FluBot",
      "description": "[FluBot](https://attack.mitre.org/software/S1067) is a multi-purpose mobile banking malware that was first observed in Spain in late 2020. It primarily spread through European countries using a variety of SMS phishing messages in multiple languages.(Citation: proofpoint_flubot_0421)(Citation: bitdefender_flubot_0524)",
      "url": "https://attack.mitre.org/software/S1067",
      "created": "28 February 2023",
      "last modified": "31 March 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: bitdefender_flubot_0524),(Citation: proofpoint_flubot_0421)"
    },
    {
      "ID": "S0577",
      "name": "FrozenCell",
      "description": "[FrozenCell](https://attack.mitre.org/software/S0577) is the mobile component of a family of surveillanceware, with a corresponding desktop component known as KasperAgent and [Micropsia](https://attack.mitre.org/software/S0339).(Citation: Lookout FrozenCell)",
      "url": "https://attack.mitre.org/software/S0577",
      "created": "17 February 2021",
      "last modified": "19 April 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout FrozenCell)"
    },
    {
      "ID": "S0536",
      "name": "GPlayed",
      "description": "[GPlayed](https://attack.mitre.org/software/S0536) is an Android trojan with a broad range of capabilities.(Citation: Talos GPlayed) ",
      "url": "https://attack.mitre.org/software/S0536",
      "created": "24 November 2020",
      "last modified": "24 November 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Talos GPlayed)"
    },
    {
      "ID": "S0423",
      "name": "Ginp",
      "description": "[Ginp](https://attack.mitre.org/software/S0423) is an Android banking trojan that has been used to target Spanish banks. Some of the code was taken directly from [Anubis](https://attack.mitre.org/software/S0422).(Citation: ThreatFabric Ginp)",
      "url": "https://attack.mitre.org/software/S0423",
      "created": "08 April 2020",
      "last modified": "11 September 2020",
      "version": "1.1",
      "contributors": "Aviran Hazum, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: ThreatFabric Ginp)"
    },
    {
      "ID": "S0535",
      "name": "Golden Cup",
      "description": "[Golden Cup](https://attack.mitre.org/software/S0535) is Android spyware that has been used to target World Cup fans.(Citation: Symantec GoldenCup) ",
      "url": "https://attack.mitre.org/software/S0535",
      "created": "20 November 2020",
      "last modified": "22 December 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Symantec GoldenCup)"
    },
    {
      "ID": "S0551",
      "name": "GoldenEagle",
      "description": "[GoldenEagle](https://attack.mitre.org/software/S0551) is a piece of Android malware that has been used in targeting of Uyghurs, Muslims, Tibetans, individuals in Turkey, and individuals in China. Samples have been found as early as 2012.(Citation: Lookout Uyghur Campaign)",
      "url": "https://attack.mitre.org/software/S0551",
      "created": "24 December 2020",
      "last modified": "25 March 2021",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout Uyghur Campaign)"
    },
    {
      "ID": "S0421",
      "name": "GolfSpy",
      "description": "[GolfSpy](https://attack.mitre.org/software/S0421) is Android spyware deployed by the group [Bouncing Golf](https://attack.mitre.org/groups/G0097).(Citation: Trend Micro Bouncing Golf 2019)",
      "url": "https://attack.mitre.org/software/S0421",
      "created": "27 January 2020",
      "last modified": "26 March 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": "(Citation: Trend Micro Bouncing Golf 2019),(Citation: Trend Micro Bouncing Golf 2019)"
    },
    {
      "ID": "S0290",
      "name": "Gooligan",
      "description": "[Gooligan](https://attack.mitre.org/software/S0290) is a malware family that runs privilege escalation exploits on Android devices and then uses its escalated privileges to steal authentication tokens that can be used to access data from many Google applications. [Gooligan](https://attack.mitre.org/software/S0290) has been described as part of the Ghost Push Android malware family. (Citation: Gooligan Citation) (Citation: Ludwig-GhostPush) (Citation: Lookout-Gooligan)",
      "url": "https://attack.mitre.org/software/S0290",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "aliases": "Ghost Push",
      "type": "malware",
      "relationship citations": ",(Citation: Gooligan Citation)"
    },
    {
      "ID": "S0406",
      "name": "Gustuff",
      "description": "[Gustuff](https://attack.mitre.org/software/S0406) is mobile malware designed to steal users' banking and virtual currency credentials.(Citation: Talos Gustuff Apr 2019)",
      "url": "https://attack.mitre.org/software/S0406",
      "created": "03 September 2019",
      "last modified": "14 October 2019",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Talos Gustuff Apr 2019),(Citation: Group IB Gustuff Mar 2019)"
    },
    {
      "ID": "S0544",
      "name": "HenBox",
      "description": "[HenBox](https://attack.mitre.org/software/S0544) is Android malware that attempts to only execute on Xiaomi devices running the MIUI operating system. [HenBox](https://attack.mitre.org/software/S0544) has primarily been used to target Uyghurs, a minority Turkic ethnic group.(Citation: Palo Alto HenBox)",
      "url": "https://attack.mitre.org/software/S0544",
      "created": "17 December 2020",
      "last modified": "12 April 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Palo Alto HenBox)"
    },
    {
      "ID": "S0322",
      "name": "HummingBad",
      "description": "[HummingBad](https://attack.mitre.org/software/S0322) is a family of Android malware that generates fraudulent advertising revenue and has the ability to obtain root access on older, vulnerable versions of Android. (Citation: ArsTechnica-HummingBad)",
      "url": "https://attack.mitre.org/software/S0322",
      "created": "25 October 2017",
      "last modified": "21 April 2023",
      "version": "1.1",
      "type": "malware",
      "relationship citations": ",(Citation: ArsTechnica-HummingBad)"
    },
    {
      "ID": "S0321",
      "name": "HummingWhale",
      "description": "[HummingWhale](https://attack.mitre.org/software/S0321) is an Android malware family that performs ad fraud. (Citation: ArsTechnica-HummingWhale)",
      "url": "https://attack.mitre.org/software/S0321",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: ArsTechnica-HummingWhale)"
    },
    {
      "ID": "S0463",
      "name": "INSOMNIA",
      "description": "[INSOMNIA](https://attack.mitre.org/software/S0463) is spyware that has been used by the group Evil Eye.(Citation: Volexity Insomnia)",
      "url": "https://attack.mitre.org/software/S0463",
      "created": "02 June 2020",
      "last modified": "24 June 2020",
      "version": "1.0",
      "platforms": "iOS",
      "type": "malware",
      "relationship citations": ",(Citation: Google Project Zero Insomnia),(Citation: Volexity Insomnia)"
    },
    {
      "ID": "S0325",
      "name": "Judy",
      "description": "[Judy](https://attack.mitre.org/software/S0325) is auto-clicking adware that was distributed through multiple apps in the Google Play Store. (Citation: CheckPoint-Judy)",
      "url": "https://attack.mitre.org/software/S0325",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: CheckPoint-Judy)"
    },
    {
      "ID": "S0288",
      "name": "KeyRaider",
      "description": "[KeyRaider](https://attack.mitre.org/software/S0288) is malware that steals Apple account credentials and other data from jailbroken iOS devices. It also has ransomware functionality. (Citation: Xiao-KeyRaider)",
      "url": "https://attack.mitre.org/software/S0288",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Xiao-KeyRaider),(Citation: Skycure-Profiles)"
    },
    {
      "ID": "S0485",
      "name": "Mandrake",
      "description": "[Mandrake](https://attack.mitre.org/software/S0485) is a sophisticated Android espionage platform that has been active in the wild since at least 2016. [Mandrake](https://attack.mitre.org/software/S0485) is very actively maintained, with sophisticated features and attacks that are executed with surgical precision.\n\n[Mandrake](https://attack.mitre.org/software/S0485) has gone undetected for several years by providing legitimate, ad-free applications with social media and real reviews to back the apps. The malware is only activated when the operators issue a specific command.(Citation: Bitdefender Mandrake)",
      "url": "https://attack.mitre.org/software/S0485",
      "created": "15 July 2020",
      "last modified": "11 September 2020",
      "version": "1.0",
      "platforms": "Android",
      "aliases": "briar, darkmatter, oxide, ricinus",
      "type": "malware",
      "relationship citations": ",(Citation: Bitdefender Mandrake)"
    },
    {
      "ID": "S0317",
      "name": "Marcher",
      "description": "[Marcher](https://attack.mitre.org/software/S0317) is Android malware that is used for financial fraud. (Citation: Proofpoint-Marcher)",
      "url": "https://attack.mitre.org/software/S0317",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Proofpoint-Marcher)"
    },
    {
      "ID": "S0303",
      "name": "MazarBOT",
      "description": "[MazarBOT](https://attack.mitre.org/software/S0303) is Android malware that was distributed via SMS in Denmark in 2016. (Citation: Tripwire-MazarBOT)",
      "url": "https://attack.mitre.org/software/S0303",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Tripwire-MazarBOT)"
    },
    {
      "ID": "S0407",
      "name": "Monokle",
      "description": "[Monokle](https://attack.mitre.org/software/S0407) is targeted, sophisticated mobile surveillanceware. It is developed for Android, but there are some code artifacts that suggests an iOS version may be in development.(Citation: Lookout-Monokle)",
      "url": "https://attack.mitre.org/software/S0407",
      "created": "04 September 2019",
      "last modified": "01 November 2021",
      "version": "1.2",
      "contributors": "Jörg Abraham, EclecticIQ",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-Monokle),(Citation: Xiao-KeyRaider)"
    },
    {
      "ID": "S0299",
      "name": "NotCompatible",
      "description": "[NotCompatible](https://attack.mitre.org/software/S0299) is an Android malware family that was used between at least 2014 and 2016. It has multiple variants that have become more sophisticated over time. (Citation: Lookout-NotCompatible)",
      "url": "https://attack.mitre.org/software/S0299",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-NotCompatible)"
    },
    {
      "ID": "S0286",
      "name": "OBAD",
      "description": "OBAD is an Android malware family. (Citation: TrendMicro-Obad)",
      "url": "https://attack.mitre.org/software/S0286",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-Obad)"
    },
    {
      "ID": "S0285",
      "name": "OldBoot",
      "description": "[OldBoot](https://attack.mitre.org/software/S0285) is an Android malware family. (Citation: HackerNews-OldBoot)",
      "url": "https://attack.mitre.org/software/S0285",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: HackerNews-OldBoot)"
    },
    {
      "ID": "S0291",
      "name": "PJApps",
      "description": "[PJApps](https://attack.mitre.org/software/S0291) is an Android malware family. (Citation: Lookout-EnterpriseApps)",
      "url": "https://attack.mitre.org/software/S0291",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-EnterpriseApps)"
    },
    {
      "ID": "S0399",
      "name": "Pallas",
      "description": "[Pallas](https://attack.mitre.org/software/S0399) is mobile surveillanceware that was custom-developed by [Dark Caracal](https://attack.mitre.org/groups/G0070).(Citation: Lookout Dark Caracal Jan 2018)",
      "url": "https://attack.mitre.org/software/S0399",
      "created": "10 July 2019",
      "last modified": "18 September 2019",
      "version": "1.1",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": "(Citation: Lookout Dark Caracal Jan 2018),(Citation: Lookout Dark Caracal Jan 2018)"
    },
    {
      "ID": "S0316",
      "name": "Pegasus for Android",
      "description": "[Pegasus for Android](https://attack.mitre.org/software/S0316) is the Android version of malware that has reportedly been linked to the NSO Group. (Citation: Lookout-PegasusAndroid) (Citation: Google-Chrysaor) The iOS version is tracked separately under [Pegasus for iOS](https://attack.mitre.org/software/S0289).",
      "url": "https://attack.mitre.org/software/S0316",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "aliases": "Chrysaor",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-PegasusAndroid)"
    },
    {
      "ID": "S0289",
      "name": "Pegasus for iOS",
      "description": "[Pegasus for iOS](https://attack.mitre.org/software/S0289) is the iOS version of malware that has reportedly been linked to the NSO Group. It has been advertised and sold to target high-value victims. (Citation: Lookout-Pegasus) (Citation: PegasusCitizenLab) The Android version is tracked separately under [Pegasus for Android](https://attack.mitre.org/software/S0316).",
      "url": "https://attack.mitre.org/software/S0289",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.1",
      "platforms": "iOS",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-Pegasus)"
    },
    {
      "ID": "S0295",
      "name": "RCSAndroid",
      "description": "[RCSAndroid](https://attack.mitre.org/software/S0295) is Android malware. (Citation: TrendMicro-RCSAndroid)",
      "url": "https://attack.mitre.org/software/S0295",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-RCSAndroid)"
    },
    {
      "ID": "S0539",
      "name": "Red Alert 2.0",
      "description": "[Red Alert 2.0](https://attack.mitre.org/software/S0539) is a banking trojan that masquerades as a VPN client.(Citation: Sophos Red Alert 2.0) ",
      "url": "https://attack.mitre.org/software/S0539",
      "created": "14 December 2020",
      "last modified": "16 December 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Sophos Red Alert 2.0)"
    },
    {
      "ID": "S0326",
      "name": "RedDrop",
      "description": "[RedDrop](https://attack.mitre.org/software/S0326) is an Android malware family that exfiltrates sensitive data from devices. (Citation: Wandera-RedDrop)",
      "url": "https://attack.mitre.org/software/S0326",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Wandera-RedDrop)"
    },
    {
      "ID": "S0403",
      "name": "Riltok",
      "description": "[Riltok](https://attack.mitre.org/software/S0403) is banking malware that uses phishing popups to collect user credentials.(Citation: Kaspersky Riltok June 2019)",
      "url": "https://attack.mitre.org/software/S0403",
      "created": "07 August 2019",
      "last modified": "18 September 2019",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky Riltok June 2019)"
    },
    {
      "ID": "S0411",
      "name": "Rotexy",
      "description": "[Rotexy](https://attack.mitre.org/software/S0411) is an Android banking malware that has evolved over several years. It was originally an SMS spyware Trojan first spotted in October 2014, and since then has evolved to contain more features, including ransomware functionality.(Citation: securelist rotexy 2018)",
      "url": "https://attack.mitre.org/software/S0411",
      "created": "23 September 2019",
      "last modified": "11 September 2020",
      "version": "1.1",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: securelist rotexy 2018)"
    },
    {
      "ID": "S0313",
      "name": "RuMMS",
      "description": "[RuMMS](https://attack.mitre.org/software/S0313) is an Android malware family. (Citation: FireEye-RuMMS)",
      "url": "https://attack.mitre.org/software/S0313",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: FireEye-RuMMS)"
    },
    {
      "ID": "S1062",
      "name": "S.O.V.A.",
      "description": "[S.O.V.A.](https://attack.mitre.org/software/S1062) is an Android banking trojan that was first identified in August 2021 and has subsequently been found in a variety of applications, including banking, cryptocurrency wallet/exchange, and shopping apps. [S.O.V.A.](https://attack.mitre.org/software/S1062), which is Russian for \"owl\", contains features not commonly found in Android malware, such as session cookie theft.(Citation: threatfabric_sova_0921)(Citation: cleafy_sova_1122)",
      "url": "https://attack.mitre.org/software/S1062",
      "created": "06 February 2023",
      "last modified": "13 April 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: cleafy_sova_1122),(Citation: threatfabric_sova_0921)"
    },
    {
      "ID": "S1055",
      "name": "SharkBot",
      "description": "[SharkBot](https://attack.mitre.org/software/S1055) is a banking malware, first discovered in October 2021, that tries to initiate money transfers directly from compromised devices by abusing Accessibility Services.(Citation: nccgroup_sharkbot_0322)",
      "url": "https://attack.mitre.org/software/S1055",
      "created": "18 January 2023",
      "last modified": "28 February 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: nccgroup_sharkbot_0322)"
    },
    {
      "ID": "S0294",
      "name": "ShiftyBug",
      "description": "[ShiftyBug](https://attack.mitre.org/software/S0294) is an auto-rooting adware family of malware for Android. The family is very similar to the other Android families known as Shedun, Shuanet, Kemoge, though it is not believed all the families were created by the same group. (Citation: Lookout-Adware)",
      "url": "https://attack.mitre.org/software/S0294",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-Adware)"
    },
    {
      "ID": "S0549",
      "name": "SilkBean",
      "description": "[SilkBean](https://attack.mitre.org/software/S0549) is a piece of Android surveillanceware containing comprehensive remote access tool (RAT) functionality that has been used in targeting of the Uyghur ethnic group.(Citation: Lookout Uyghur Campaign)",
      "url": "https://attack.mitre.org/software/S0549",
      "created": "24 December 2020",
      "last modified": "19 April 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout Uyghur Campaign)"
    },
    {
      "ID": "S0419",
      "name": "SimBad",
      "description": "[SimBad](https://attack.mitre.org/software/S0419) was a strain of adware on the Google Play Store, distributed through the RXDroider Software Development Kit. The name \"SimBad\" was derived from the fact that most of the infected applications were simulator games. The adware was controlled using an instance of the open source framework Parse Server.(Citation: CheckPoint SimBad 2019)",
      "url": "https://attack.mitre.org/software/S0419",
      "created": "21 November 2019",
      "last modified": "27 January 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: CheckPoint SimBad 2019)"
    },
    {
      "ID": "S0327",
      "name": "Skygofree",
      "description": "[Skygofree](https://attack.mitre.org/software/S0327) is Android spyware that is believed to have been developed in 2014 and used through at least 2017. (Citation: Kaspersky-Skygofree)",
      "url": "https://attack.mitre.org/software/S0327",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky-Skygofree)"
    },
    {
      "ID": "S0324",
      "name": "SpyDealer",
      "description": "[SpyDealer](https://attack.mitre.org/software/S0324) is Android malware that exfiltrates sensitive data from Android devices. (Citation: PaloAlto-SpyDealer)",
      "url": "https://attack.mitre.org/software/S0324",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: PaloAlto-SpyDealer)"
    },
    {
      "ID": "S0305",
      "name": "SpyNote RAT",
      "description": "[SpyNote RAT](https://attack.mitre.org/software/S0305) (Remote Access Trojan) is a family of malicious Android apps. The [SpyNote RAT](https://attack.mitre.org/software/S0305) builder tool can be used to develop malicious apps with the malware's functionality. (Citation: Zscaler-SpyNote)",
      "url": "https://attack.mitre.org/software/S0305",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Zscaler-SpyNote)"
    },
    {
      "ID": "S0328",
      "name": "Stealth Mango",
      "description": "[Stealth Mango](https://attack.mitre.org/software/S0328) is Android malware that has reportedly been used to successfully compromise the mobile devices of government officials, members of the military, medical professionals, and civilians. The iOS malware known as [Tangelo](https://attack.mitre.org/software/S0329) is believed to be from the same developer. (Citation: Lookout-StealthMango)",
      "url": "https://attack.mitre.org/software/S0328",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.3",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-StealthMango)"
    },
    {
      "ID": "S0545",
      "name": "TERRACOTTA",
      "description": "[TERRACOTTA](https://attack.mitre.org/software/S0545) is an ad fraud botnet that has been capable of generating over 2 billion fraudulent requests per week.(Citation: WhiteOps TERRACOTTA)",
      "url": "https://attack.mitre.org/software/S0545",
      "created": "18 December 2020",
      "last modified": "28 December 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: WhiteOps TERRACOTTA)"
    },
    {
      "ID": "S0329",
      "name": "Tangelo",
      "description": "[Tangelo](https://attack.mitre.org/software/S0329) is iOS malware that is believed to be from the same developers as the [Stealth Mango](https://attack.mitre.org/software/S0328) Android malware. It is not a mobile application, but rather a Debian package that can only run on jailbroken iOS devices. (Citation: Lookout-StealthMango)",
      "url": "https://attack.mitre.org/software/S0329",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "1.2",
      "platforms": "iOS",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout-StealthMango)"
    },
    {
      "ID": "S1069",
      "name": "TangleBot",
      "description": "[TangleBot](https://attack.mitre.org/software/S1069) is SMS malware that was initially observed in September 2021, primarily targeting mobile users in the United States and Canada. [TangleBot](https://attack.mitre.org/software/S1069) has used SMS text message lures about COVID-19 regulations and vaccines to trick mobile users into downloading the malware, similar to [FluBot](https://attack.mitre.org/software/S1067) Android malware campaigns.(Citation: cloudmark_tanglebot_0921)",
      "url": "https://attack.mitre.org/software/S1069",
      "created": "28 February 2023",
      "last modified": "01 March 2023",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: cloudmark_tanglebot_0921)"
    },
    {
      "ID": "S1056",
      "name": "TianySpy",
      "description": "[TianySpy](https://attack.mitre.org/software/S1056) is a mobile malware primarily spread by SMS phishing between September 30 and October 12, 2021. [TianySpy](https://attack.mitre.org/software/S1056) is believed to have targeted credentials associated with membership websites of major Japanese telecommunication services.(Citation: trendmicro_tianyspy_0122)  ",
      "url": "https://attack.mitre.org/software/S1056",
      "created": "19 January 2023",
      "last modified": "29 March 2023",
      "version": "1.0",
      "platforms": "Android, iOS",
      "type": "malware",
      "relationship citations": ",(Citation: trendmicro_tianyspy_0122)"
    },
    {
      "ID": "S0558",
      "name": "Tiktok Pro",
      "description": "[Tiktok Pro](https://attack.mitre.org/software/S0558) is spyware that has been masquerading as the TikTok application.(Citation: Zscaler TikTok Spyware)",
      "url": "https://attack.mitre.org/software/S0558",
      "created": "05 January 2021",
      "last modified": "19 April 2021",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Zscaler TikTok Spyware)"
    },
    {
      "ID": "S0424",
      "name": "Triada",
      "description": "[Triada](https://attack.mitre.org/software/S0424) was first reported in 2016 as a second stage malware. Later versions in 2019 appeared with new techniques and as an initial downloader of other Trojan apps.(Citation: Kaspersky Triada March 2016)",
      "url": "https://attack.mitre.org/software/S0424",
      "created": "16 July 2019",
      "last modified": "28 May 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Krebs-Triada June 2019),(Citation: Kaspersky Triada March 2016),(Citation: Kaspersky Triada June 2016),(Citation: Google Triada June 2019)"
    },
    {
      "ID": "S0427",
      "name": "TrickMo",
      "description": "[TrickMo](https://attack.mitre.org/software/S0427) a 2FA bypass mobile banking trojan, most likely being distributed by [TrickBot](https://attack.mitre.org/software/S0266). [TrickMo](https://attack.mitre.org/software/S0427) has been primarily targeting users located in Germany.(Citation: SecurityIntelligence TrickMo)\n\n[TrickMo](https://attack.mitre.org/software/S0427) is designed to steal transaction authorization numbers (TANs), which are typically used as one-time passwords.(Citation: SecurityIntelligence TrickMo) ",
      "url": "https://attack.mitre.org/software/S0427",
      "created": "24 April 2020",
      "last modified": "11 September 2020",
      "version": "1.1",
      "contributors": "Aviran Hazum, Check Point; Ohad Mana, Check Point; Sergey Persikov, Check Point",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: SecurityIntelligence TrickMo)"
    },
    {
      "ID": "S0307",
      "name": "Trojan-SMS.AndroidOS.Agent.ao",
      "description": "[Trojan-SMS.AndroidOS.Agent.ao](https://attack.mitre.org/software/S0307) is Android malware. (Citation: Kaspersky-MobileMalware)",
      "url": "https://attack.mitre.org/software/S0307",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky-MobileMalware)"
    },
    {
      "ID": "S0306",
      "name": "Trojan-SMS.AndroidOS.FakeInst.a",
      "description": "[Trojan-SMS.AndroidOS.FakeInst.a](https://attack.mitre.org/software/S0306) is Android malware. (Citation: Kaspersky-MobileMalware)",
      "url": "https://attack.mitre.org/software/S0306",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky-MobileMalware)"
    },
    {
      "ID": "S0308",
      "name": "Trojan-SMS.AndroidOS.OpFake.a",
      "description": "[Trojan-SMS.AndroidOS.OpFake.a](https://attack.mitre.org/software/S0308) is Android malware. (Citation: Kaspersky-MobileMalware)",
      "url": "https://attack.mitre.org/software/S0308",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Kaspersky-MobileMalware)"
    },
    {
      "ID": "S0302",
      "name": "Twitoor",
      "description": "[Twitoor](https://attack.mitre.org/software/S0302) is a dropper application capable of receiving commands from social media.(Citation: ESET-Twitoor)",
      "url": "https://attack.mitre.org/software/S0302",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "2.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: ESET-Twitoor)"
    },
    {
      "ID": "S0418",
      "name": "ViceLeaker",
      "description": "[ViceLeaker](https://attack.mitre.org/software/S0418) is a spyware framework, capable of extensive surveillance and data exfiltration operations, primarily targeting devices belonging to Israeli citizens.(Citation: SecureList - ViceLeaker 2019)(Citation: Bitdefender - Triout 2018)",
      "url": "https://attack.mitre.org/software/S0418",
      "created": "21 November 2019",
      "last modified": "26 March 2020",
      "version": "1.0",
      "platforms": "Android",
      "aliases": "Triout",
      "type": "malware",
      "relationship citations": ",(Citation: Bitdefender - Triout 2018),(Citation: SecureList - ViceLeaker 2019)"
    },
    {
      "ID": "S0506",
      "name": "ViperRAT",
      "description": "[ViperRAT](https://attack.mitre.org/software/S0506) is sophisticated surveillanceware that has been in operation since at least 2015 and was used to target the Israeli Defense Force.(Citation: Lookout ViperRAT) ",
      "url": "https://attack.mitre.org/software/S0506",
      "created": "11 September 2020",
      "last modified": "29 September 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout ViperRAT)"
    },
    {
      "ID": "S0312",
      "name": "WireLurker",
      "description": "[WireLurker](https://attack.mitre.org/software/S0312) is a family of macOS malware that targets iOS devices connected over USB. (Citation: PaloAlto-WireLurker)",
      "url": "https://attack.mitre.org/software/S0312",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: PaloAlto-WireLurker)"
    },
    {
      "ID": "S0489",
      "name": "WolfRAT",
      "description": "[WolfRAT](https://attack.mitre.org/software/S0489) is malware based on a leaked version of [Dendroid](https://attack.mitre.org/software/S0301) that has primarily targeted Thai users. [WolfRAT](https://attack.mitre.org/software/S0489) has most likely been operated by the now defunct organization Wolf Research.(Citation: Talos-WolfRAT) ",
      "url": "https://attack.mitre.org/software/S0489",
      "created": "20 July 2020",
      "last modified": "11 September 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Talos-WolfRAT)"
    },
    {
      "ID": "S0314",
      "name": "X-Agent for Android",
      "description": "[X-Agent for Android](https://attack.mitre.org/software/S0314) is Android malware that was placed in a repackaged version of a Ukrainian artillery targeting application. The malware reportedly retrieved general location data on where the victim device was used, and therefore could likely indicate the potential location of Ukrainian artillery. (Citation: CrowdStrike-Android) Is it tracked separately from the [CHOPSTICK](https://attack.mitre.org/software/S0023).",
      "url": "https://attack.mitre.org/software/S0314",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": "(Citation: CrowdStrike-Android),(Citation: CrowdStrike-Android)"
    },
    {
      "ID": "S0318",
      "name": "XLoader for Android",
      "description": "[XLoader for Android](https://attack.mitre.org/software/S0318) is a malicious Android app first observed targeting Japan, Korea, China, Taiwan, and Hong Kong in 2018. It has more recently been observed targeting South Korean users as a pornography application.(Citation: TrendMicro-XLoader-FakeSpy)(Citation: TrendMicro-XLoader) It is tracked separately from the [XLoader for iOS](https://attack.mitre.org/software/S0490).",
      "url": "https://attack.mitre.org/software/S0318",
      "created": "17 October 2018",
      "last modified": "24 October 2022",
      "version": "2.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-XLoader-FakeSpy),(Citation: TrendMicro-XLoader)"
    },
    {
      "ID": "S0490",
      "name": "XLoader for iOS",
      "description": "[XLoader for iOS](https://attack.mitre.org/software/S0490) is a malicious iOS application that is capable of gathering system information.(Citation: TrendMicro-XLoader-FakeSpy) It is tracked separately from the [XLoader for Android](https://attack.mitre.org/software/S0318).",
      "url": "https://attack.mitre.org/software/S0490",
      "created": "20 July 2020",
      "last modified": "07 December 2021",
      "version": "1.1",
      "platforms": "iOS",
      "type": "malware",
      "relationship citations": ",(Citation: TrendMicro-XLoader-FakeSpy)"
    },
    {
      "ID": "S0298",
      "name": "Xbot",
      "description": "[Xbot](https://attack.mitre.org/software/S0298) is an Android malware family that was observed in 2016 primarily targeting Android users in Russia and Australia. (Citation: PaloAlto-Xbot)",
      "url": "https://attack.mitre.org/software/S0298",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "tool",
      "relationship citations": ",(Citation: PaloAlto-Xbot)"
    },
    {
      "ID": "S0297",
      "name": "XcodeGhost",
      "description": "[XcodeGhost](https://attack.mitre.org/software/S0297) is iOS malware that infected at least 39 iOS apps in 2015 and potentially affected millions of users. (Citation: PaloAlto-XcodeGhost1) (Citation: PaloAlto-XcodeGhost)",
      "url": "https://attack.mitre.org/software/S0297",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: PaloAlto-XcodeGhost),(Citation: PaloAlto-XcodeGhost1)"
    },
    {
      "ID": "S0311",
      "name": "YiSpecter",
      "description": "[YiSpecter](https://attack.mitre.org/software/S0311) is a family of iOS and Android malware, first detected in November 2014, targeting users in mainland China and Taiwan. [YiSpecter](https://attack.mitre.org/software/S0311) abuses private APIs in iOS to infect both jailbroken and non-jailbroken devices.(Citation: paloalto_yispecter_1015)",
      "url": "https://attack.mitre.org/software/S0311",
      "created": "25 October 2017",
      "last modified": "20 April 2023",
      "version": "2.0",
      "platforms": "Android, iOS",
      "type": "malware",
      "relationship citations": ",(Citation: paloalto_yispecter_1015)"
    },
    {
      "ID": "S0494",
      "name": "Zen",
      "description": "[Zen](https://attack.mitre.org/software/S0494) is Android malware that was first seen in 2013.(Citation: Google Security Zen)",
      "url": "https://attack.mitre.org/software/S0494",
      "created": "27 July 2020",
      "last modified": "11 August 2020",
      "version": "1.0",
      "platforms": "Android",
      "type": "malware",
      "relationship citations": ",(Citation: Google Security Zen)"
    },
    {
      "ID": "S0287",
      "name": "ZergHelper",
      "description": "[ZergHelper](https://attack.mitre.org/software/S0287) is iOS riskware that was unique due to its apparent evasion of Apple's App Store review process. No malicious functionality was identified in the app, but it presents security risks. (Citation: Xiao-ZergHelper)",
      "url": "https://attack.mitre.org/software/S0287",
      "created": "25 October 2017",
      "last modified": "24 October 2022",
      "version": "1.0",
      "type": "malware",
      "relationship citations": ",(Citation: Xiao-ZergHelper)"
    },
    {
      "ID": "S0507",
      "name": "eSurv",
      "description": "[eSurv](https://attack.mitre.org/software/S0507) is mobile surveillanceware designed for the lawful intercept market that was developed over the course of many years.(Citation: Lookout eSurv)",
      "url": "https://attack.mitre.org/software/S0507",
      "created": "14 September 2020",
      "last modified": "14 September 2020",
      "version": "1.0",
      "platforms": "Android, iOS",
      "type": "malware",
      "relationship citations": ",(Citation: Lookout eSurv)"
    }];

module.exports = threatSeedData;